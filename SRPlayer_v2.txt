package {
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;

    public class PlayerLgHeader extends MovieClip {

        public var headerbg:MovieClip;
        public var channel_name:TextField;
        public var player_num:TextField;

        function mcConfigStreamClickHandler(_arg1:MouseEvent):void{
            _arg1.target.parent.parent.setChildIndex(_arg1.target.parent.parent.mcStreamConfig, (_arg1.target.parent.parent.numChildren - 1));
            if (_arg1.target.parent.parent.mcStreamConfig.visible == true){
                _arg1.target.parent.parent.mcStreamConfig.visible = false;
            } else {
                _arg1.target.parent.parent.mcStreamConfig.visible = true;
            };
        }

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.events.*;

    public class PlayerControls extends MovieClip {

        public var playPause:MovieClip;
        public var toggleHD:MovieClip;
        public var volumeSlider:VolumeSlider;
        public var fullScreen:MovieClip;
        public var volumeIcon:MovieClip;
        var blnMute:Boolean = false;
        var nVol:Number;
        var currentQuality:String;
        var isFullscreen:Boolean = false;

        public function PlayerControls(){
            this.currentQuality = "low";
            this.initControls();
            this.playPause.buttonMode = true;
            this.volumeIcon.buttonMode = true;
            this.fullScreen.buttonMode = true;
            this.toggleHD.buttonMode = true;
            this.playPause.addEventListener(MouseEvent.CLICK, this.togglePlay);
            this.fullScreen.addEventListener(MouseEvent.CLICK, this.onFullscreen);
            this.toggleHD.addEventListener(MouseEvent.CLICK, this.toggleQuality);
            this.volumeIcon.addEventListener(MouseEvent.CLICK, this.muteHandler);
            this.addEventListener("changeVolume", this.onChangeVolume);
            this.addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
        }
        function onAddedToStage(_arg1:Event):void{
            stage.addEventListener(Event.FULLSCREEN, this.onFullscreenHandler);
        }
        function initControls(){
            if (this.currentQuality == "low"){
                this.toggleHD.gotoAndStop(1);
            } else {
                this.toggleHD.gotoAndStop(2);
            };
            this.playPause.gotoAndStop(0);
            this.fullScreen.gotoAndStop(0);
            this.volumeIcon.gotoAndStop(4);
            this.volumeSlider.setVolume(0.75, true);
        }
        function setVolume(_arg1:Number):void{
            if (_arg1 != 0){
                this.blnMute = false;
            };
            if ((((_arg1 >= 0)) && ((_arg1 <= 0.1)))){
                this.volumeIcon.gotoAndStop(1);
            } else {
                if ((((_arg1 >= 0.1)) && ((_arg1 < 0.5)))){
                    this.volumeIcon.gotoAndStop(2);
                } else {
                    if ((((_arg1 >= 0.5)) && ((_arg1 < 0.75)))){
                        this.volumeIcon.gotoAndStop(3);
                    } else {
                        if ((((_arg1 >= 0.75)) && ((_arg1 <= 1)))){
                            this.volumeIcon.gotoAndStop(4);
                        } else {
                            this.volumeIcon.gotoAndStop(1);
                        };
                    };
                };
            };
        }
        function onChangeVolume(_arg1:Event):void{
            var _local2:Number = _arg1.target.currentVolume;
            this.setVolume(_local2);
        }
        function togglePlay(_arg1:MouseEvent):void{
            if (this.playPause.currentFrame == 1){
                dispatchEvent(new Event("streamPaused", true, true));
                this.playPause.gotoAndStop(2);
            } else {
                dispatchEvent(new Event("streamPlayed", true, true));
                this.playPause.gotoAndStop(1);
            };
        }
        function onFullscreen(_arg1:MouseEvent):void{
            this.toggleFullscreen();
        }
        function onFullscreenHandler(_arg1:Event):void{
            this.toggleFullscreen();
        }
        function toggleFullscreen():void{
            if (this.isFullscreen == true){
                stage.displayState = StageDisplayState.NORMAL;
                this.fullScreen.gotoAndStop(0);
                this.isFullscreen = false;
            } else {
                stage.displayState = StageDisplayState.FULL_SCREEN;
                stage.align = "";
                this.fullScreen.gotoAndStop(2);
                this.isFullscreen = true;
            };
            stage.align = "";
        }
        function toggleQuality(_arg1:MouseEvent):void{
            if (this.toggleHD.currentFrame == 2){
                this.toggleHD.gotoAndStop(1);
                this.setQuality("low");
            } else {
                this.toggleHD.gotoAndStop(2);
                this.setQuality("high");
            };
        }
        function getQuality():String{
            return (this.currentQuality);
        }
        function setQuality(_arg1:String):void{
            this.currentQuality = _arg1;
            dispatchEvent(new Event("qualityChanged", true, true));
        }
        function muteHandler(_arg1:MouseEvent):void{
            if (this.blnMute == true){
                this.volumeSlider.setVolume(this.nVol);
                this.blnMute = false;
            } else {
                this.blnMute = true;
                this.nVol = this.volumeSlider.getVolume();
                this.volumeSlider.setVolume(0);
            };
        }

    }
}//package 
﻿package {
    import flash.text.*;

    public dynamic class Font1 extends Font {

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import com.greensock.loading.*;
    import com.greensock.events.*;
    import com.greensock.loading.display.*;
    import flash.external.*;

    public class SRPlayer extends MovieClip {

        public var placeHolder:MovieClip;
        public var overlay:PlayerLgHeader;
        public var strLoader:String;
        public var obj:Object;
        public var swf:ContentDisplay;
        public var swfLoader:SWFLoader;
        var initTimer:Timer;
        var arrangeTimer:Timer;
        var adTimer:Timer;
        var streamConfig:StreamConfig;
        public var blnShowCtls:Boolean;
        public var currentQuality:String;
        public var playerNum:Number;
        public var isScaled:Boolean = false;
        public var hasLoader:Boolean = false;
        public var api;
        public var dWidth:Number = 620;
        public var dHeight:Number = 378;
        public var currentVolume:Number = 0.75;
        public var mcLoader:SRLoader;

        public function SRPlayer(_arg1:String, _arg2:Number, _arg3:Boolean=false){
            var strName:* = _arg1;
            var nNum:* = _arg2;
            var blnCtls:Boolean = _arg3;
            this.initTimer = new Timer(500, 20);
            this.arrangeTimer = new Timer(3000);
            this.adTimer = new Timer(1000, 60);
            this.mcLoader = new SRLoader(false);
            super();
            this.arrangeTimer.addEventListener(TimerEvent.TIMER, this.timerArrange);
            this.adTimer.addEventListener(TimerEvent.TIMER, this.onAdTimer);
            addEventListener(Event.REMOVED_FROM_STAGE, this.dealloc);
            if (nNum == 1){
                blnCtls = true;
            };
            this.blnShowCtls = blnCtls;
            this.addEventListener(MouseEvent.ROLL_OVER, function (_arg1:MouseEvent):void{
                showCtls();
            });
            this.addEventListener(MouseEvent.ROLL_OUT, function (_arg1:MouseEvent):void{
                hideCtls();
            });
            this.addEventListener("changeVolume", this.onChangeVolume);
            this.addEventListener("streamPlayed", this.onStreamPlay);
            this.addEventListener("streamPaused", this.onStreamPause);
            this.addEventListener("qualityChanged", this.onQualityChange);
            this.addEventListener("refreshStream", this.onRefreshStream);
            this.addEventListener("closeConfig", this.onCloseConfig);
            this.addEventListener("updateChat", this.onUpdateChat);
            this.overlay.visible = false;
            this.streamConfig = new StreamConfig();
            this.name = strName;
            this.playerNum = nNum;
            this.strLoader = strName;
            gotoAndStop(1);
            addChild(this.streamConfig);
            this.currentQuality = "low";
            this.overlay.visible = false;
            this.streamConfig.visible = false;
            this.updateStats();
            this.arrangePlayer();
            this.initControls();
        }
        public function getLoader():ContentDisplay{
            return (this.swf);
        }
        public function changeQuality(_arg1:String="low"):Boolean{
            return (true);
        }
        function dealloc(_arg1:Event):void{
        }
        public function checkFrozen():Boolean{
            return (false);
        }
        public function onResize(_arg1:Number):void{
        }
        public function loaderProgress(_arg1:Number){
            this.mcLoader.showProgress(_arg1);
        }
        public function initStream(_arg1:Boolean=false):void{
            var _local3:Number;
            var _local2:Boolean;
            trace(((("STREAMRIOT: initializing stream with dimensions: " + this.width) + "x") + this.height));
            _local2 = this.setApi();
            this.hasLoader = true;
            if (this.changeQuality(this.currentQuality) == false){
                if (_arg1){
                    this.initTimer.addEventListener(TimerEvent.TIMER, this.timerInit);
                    this.addEventListener("loadComplete", this.loadComplete);
                    trace(("STREAMRIOT: error initStream for loader " + this.strLoader));
                    this.initTimer.start();
                    trace(("STREAMRIOT: init timer start for loader " + this.strLoader));
                };
                return;
            };
            this.initVolume();
            this.updateStats();
            this.arrangePlayer();
            this.adTimer.start();
            trace("SR: initStream complete");
            this.dispatchEvent(new Event("loadComplete", true, true));
        }
        function onStreamPlay(_arg1:Event):void{
            this.playStream(this.currentQuality);
        }
        function onUpdateChat(_arg1:Event):void{
            if (ExternalInterface.available){
            };
        }
        function onStreamPause(_arg1:Event):void{
            this.pauseStream();
        }
        function refreshStream():void{
            RiotPlayer.instance.updateStream(this.playerNum, this.obj.stream_id);
        }
        function onRefreshStream(_arg1:Event):void{
            this.refreshStream();
        }
        function onQualityChange(_arg1:Event):void{
            var _local2:String = _arg1.target.getQuality();
            this.currentQuality = _local2;
            this.changeQuality(_local2);
        }
        function updateStats():void{
            this.overlay.player_num.text = String(this.playerNum);
            if (this.obj != null){
                this.overlay.channel_name.text = this.obj.channel_name;
            } else {
                this.overlay.channel_name.text = "";
            };
        }
        function loadComplete(_arg1:Event):void{
            trace(("STREAMRIOT: init timer stopped for loader " + this.strLoader));
            this.initTimer.stop();
        }
        function timerInit(_arg1:TimerEvent):void{
            trace(("STREAMRIOT: init timer event for loader " + this.strLoader));
            this.initStream();
        }
        function timerArrange(_arg1:TimerEvent):void{
            trace("STREAMRIOT: timerArrange");
            this.arrangePlayer();
        }
        public function onAdTimer(_arg1:TimerEvent):void{
            if (this.checkFrozen() == true){
                this.refreshStream();
            };
        }
        public function arrangePlayer():void{
            setChildIndex(this.overlay, (this.numChildren - 1));
            setChildIndex(this.streamConfig, (this.numChildren - 1));
            setChildIndex(this.placeHolder, 0);
            this.streamConfig.setNum(this.playerNum, this.strLoader);
        }
        function initControls():void{
        }
        function showCtls():void{
            if (this.swf == null){
            };
            this.overlay.visible = true;
            this.overlay.visible = true;
            this.streamConfig.visible = true;
        }
        function hideCtls():void{
            if (this.swf == null){
            };
            this.overlay.visible = false;
            this.overlay.visible = false;
            this.streamConfig.visible = false;
        }
        function onCloseConfig(_arg1:Event):void{
            this.streamConfig.visible = false;
        }
        public function onChangeVolume(_arg1:Event):void{
            var _local2:Number;
            _local2 = _arg1.target.getVolume();
            this.setVolume(_local2);
            trace(("SR: on change volume " + this.playerNum));
            _arg1.stopPropagation();
        }
        public function muteVolume(){
            this.setVolume(0, false);
            trace(("SR: muting " + this.playerNum));
        }
        public function unmuteVolume(){
            this.setVolume(this.currentVolume);
            trace(((("SR: unmuting " + this.playerNum) + " ") + this.currentVolume));
        }
        public function setVolume(_arg1:Number, _arg2:Boolean=true):Boolean{
            trace(((("SR: setting volume " + _arg1) + " ") + this.playerNum));
            if (_arg2 == true){
                this.currentVolume = _arg1;
            };
            return (true);
        }
        public function playStream(_arg1:String="low"):Boolean{
            var strQuality:String = _arg1;
            trace("STREAMRIOT: attempting to play stream");
            try {
                return (true);
            } catch(e:Error) {
                trace(("STREAMRIOT: error playing stream: " + e.message));
                return (false);
            };
            return (true);
        }
        public function stopStream():void{
            if ((((this.obj == null)) || ((this.api == null)))){
                return;
            };
        }
        function removeStream():void{
            var loader:* = null;
            this.stopStream();
            try {
                loader = LoaderMax.getLoader(this.strLoader);
                loader.dispose(true);
                trace("STREAMRIOT: removed stream");
            } catch(e:Error) {
                trace(("STREAMRIOT: error removing stream. " + e.message));
            };
            this.hasLoader = false;
            this.isScaled = false;
            this.swf = null;
            this.api = null;
            this.overlay.visible = false;
        }
        public function pauseStream():Boolean{
            return (true);
        }
        function initVolume():Boolean{
            trace("STREAMRIOT: attempting to initialize volume");
            if (this.blnShowCtls){
                this.unmuteVolume();
            } else {
                this.muteVolume();
            };
            return (true);
        }
        function updatePlayer(_arg1:Number):void{
            this.playerNum = _arg1;
            this.streamConfig.setNum(_arg1, this.strLoader);
            this.updateStats();
            this.blnShowCtls = false;
            if (this.playerNum == 1){
                this.blnShowCtls = true;
                this.unmuteVolume();
            } else {
                this.muteVolume();
            };
        }
        function setLoader(_arg1:String, _arg2:Object, _arg3:Number):void{
            trace("STREAMRIOT: updating loader");
            this.strLoader = _arg1;
            this.obj = _arg2;
            this.swf = (LoaderMax.getContent(this.strLoader) as ContentDisplay);
            this.setApi();
        }
        public function showLoader():void{
            this.mcLoader.showLoader();
        }
        public function hideLoader():void{
            this.mcLoader.visible = false;
        }
        public function validateSwf():Boolean{
            try {
            } catch(e:Error) {
            };
            return (true);
        }
        public function addLoader(_arg1:Object, _arg2:Boolean=true):SWFLoader{
            var _local3:SWFLoader;
            trace("STREAMRIOT: adding loader to player");
            _local3 = new SWFLoader(_arg1.src, {
                name:this.name,
                container:this,
                x:0,
                y:0,
                autoPlay:true,
                hAlign:"center",
                vAlign:"middle",
                allowMalformedURL:true,
                onComplete:this.onLoaderComplete,
                onInit:this.initHandler
            });
            if (_arg2 == true){
            };
            this.obj = _arg1;
            return (_local3);
        }
        function initHandler(_arg1:LoaderEvent):void{
            var _local3:SWFLoader;
            trace("STREAMRIOT: player loader completed ");
            var _local2:String = _arg1.target.name;
            this.swf = (LoaderMax.getContent(_local2) as ContentDisplay);
            this.swfLoader = LoaderMax.getLoader(_local2);
            if (this.validateSwf() == false){
                trace("SR: Loader failed");
                _local3 = LoaderMax.getLoader(_local2);
                _local3.load(true);
                return;
            };
            this.arrangePlayer();
            this.hideLoader();
            this.initStream(true);
        }
        public function onLoaderComplete(_arg1:LoaderEvent):void{
        }
        public function setApi():Boolean{
            try {
                if ((this.swf.getChildAt(0) is Loader)){
                    trace("STREAMRIOT: Loader found as content");
                    this.api = this.swf.rawContent.getChildAt(0);
                } else {
                    this.api = this.swf.rawContent;
                    trace(((("STREAMRIOT: No security errors api wxh:" + this.api.width) + "x") + this.api.height));
                };
                trace("STREAMRIOT: Loader API var saved");
            } catch(e:Error) {
                trace(("STREAMRIOT: error saving api " + e.message));
            };
            if ((((((this.api == null)) || ((this.api.width == 0)))) || ((this.api.height == 0)))){
                return (false);
            };
            return (true);
        }

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.events.*;

    public class StreamConfig extends MovieClip {

        public var makeActive:MovieClip;
        public var refreshStream:MovieClip;
        public var closeConfig:MovieClip;
        public var closePlayer:MovieClip;
        public var bg:MovieClip;
        public var sep:MovieClip;
        public var chat:MovieClip;
        public var player_num:String;
        public var strLoader:String;
        public var moveStream:MoveStream;
        public var playerNum:Number;

        public function StreamConfig(){
            super();
            this.chat.buttonMode = true;
            this.makeActive.buttonMode = true;
            this.refreshStream.buttonMode = true;
            this.closePlayer.buttonMode = true;
            this.closeConfig.buttonMode = true;
            this.chat.addEventListener(MouseEvent.CLICK, this.chatClickHandler);
            this.makeActive.addEventListener(MouseEvent.CLICK, this.makeActiveClickHandler);
            this.refreshStream.addEventListener(MouseEvent.CLICK, this.refreshStreamClickHandler);
            this.closePlayer.addEventListener(MouseEvent.CLICK, this.closePlayerClickHandler);
            this.closeConfig.addEventListener(MouseEvent.CLICK, this.closeConfigClickHandler);
            this.chat.addEventListener(MouseEvent.ROLL_OVER, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(2);
            });
            this.chat.addEventListener(MouseEvent.ROLL_OUT, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(1);
            });
            this.makeActive.addEventListener(MouseEvent.ROLL_OVER, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(2);
            });
            this.makeActive.addEventListener(MouseEvent.ROLL_OUT, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(1);
            });
            this.refreshStream.addEventListener(MouseEvent.ROLL_OVER, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(2);
            });
            this.refreshStream.addEventListener(MouseEvent.ROLL_OUT, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(1);
            });
            this.closePlayer.addEventListener(MouseEvent.ROLL_OVER, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(2);
            });
            this.closePlayer.addEventListener(MouseEvent.ROLL_OUT, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(1);
            });
            this.closeConfig.addEventListener(MouseEvent.ROLL_OVER, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(2);
            });
            this.closeConfig.addEventListener(MouseEvent.ROLL_OUT, function (_arg1:MouseEvent):void{
                _arg1.target.gotoAndStop(1);
            });
            this.chat.gotoAndStop(1);
            this.makeActive.gotoAndStop(1);
            this.refreshStream.gotoAndStop(1);
            this.closePlayer.gotoAndStop(1);
            this.closeConfig.gotoAndStop(1);
            removeChild(this.refreshStream);
            removeChild(this.chat);
            removeChild(this.closePlayer);
            removeChild(this.sep);
        }
        public function setNum(_arg1:Number, _arg2:String):void{
            this.playerNum = _arg1;
            this.strLoader = _arg2;
            this.arrangeConfig();
        }
        function arrangeConfig():void{
            var _local1:Number;
            var _local2:Number;
            var _local3:Number = 2;
            var _local4:MovieClip = (this.parent as MovieClip);
            var _local5:MovieClip = _local4.overlay;
            if (this.playerNum == 1){
                _local3 = 1.1;
            };
            this.makeActive.scaleX = (this.makeActive.scaleY = _local3);
            this.chat.scaleX = (this.chat.scaleY = _local3);
            this.refreshStream.scaleX = (this.refreshStream.scaleY = _local3);
            this.closePlayer.scaleX = (this.closePlayer.scaleY = _local3);
            if (this.playerNum == 1){
                this.makeActive.visible = false;
                this.closeConfig.visible = false;
                this.closeConfig.x = 0;
                this.makeActive.x = 0;
                this.bg.alpha = 0;
                this.x = ((_local5.x + _local5.channel_name.x) + _local5.channel_name.width);
                this.y = (_local5.y + 5);
                this.bg.height = _local5.headerbg.height;
                this.bg.width = ((_local5.width - _local5.channel_name.x) - _local5.channel_name.width);
                this.bg.x = 0;
                this.refreshStream.x = ((this.bg.width - this.refreshStream.width) - 15);
                this.chat.x = ((this.refreshStream.x - this.chat.width) - 15);
                this.closePlayer.x = ((this.refreshStream.x + this.refreshStream.width) + 30);
                this.sep.x = (this.closePlayer.x - 17);
                this.chat.y = 20;
                this.refreshStream.y = this.chat.y;
                this.closePlayer.y = this.chat.y;
                this.sep.y = this.chat.y;
                this.sep.scaleY = (this.sep.scaleX = 0.6);
            } else {
                this.makeActive.visible = true;
                this.closeConfig.visible = true;
                this.bg.alpha = 0.95;
                this.bg.height = ((_local5.height - _local5.headerbg.height) - 15);
                this.bg.width = (_local5.width / 2);
                this.bg.x = (_local5.width / 2);
                this.x = _local5.x;
                this.y = ((_local5.headerbg.y + _local5.headerbg.height) + 15);
                this.makeActive.x = (this.bg.x + 40);
                this.chat.x = ((this.makeActive.x + this.makeActive.width) + 40);
                this.refreshStream.x = ((this.chat.x + this.chat.width) + 40);
                this.closeConfig.x = ((this.bg.x + this.bg.width) - 40);
                this.makeActive.scaleX = (this.makeActive.scaleY = 2.5);
                this.makeActive.y = (this.bg.y + 50);
                this.chat.y = (this.makeActive.y + 10);
                this.refreshStream.y = this.chat.y;
                this.closeConfig.y = 20;
            };
        }
        function closeConfigClickHandler(_arg1:MouseEvent):void{
            dispatchEvent(new Event("closeConfig", true, true));
            this.visible = false;
        }
        function closePlayerClickHandler(_arg1:MouseEvent):void{
            dispatchEvent(new Event("closePlayer", true, true));
            this.visible = false;
        }
        function makeActiveClickHandler(_arg1:MouseEvent):void{
            dispatchEvent(new Event("makeActive", true, true));
            this.visible = false;
        }
        function refreshStreamClickHandler(_arg1:MouseEvent):void{
            trace("STREAMRIOT: calling refreshStream");
            dispatchEvent(new Event("refreshStream", true, true));
        }
        function chatClickHandler(_arg1:MouseEvent):void{
            dispatchEvent(new Event("updateChat", true, true));
            MovieClip(root).clearChats();
            if (this.chat.currentFrame != 2){
                this.chat.gotoAndStop(2);
            } else {
                this.chat.gotoAndStop(1);
            };
        }

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.geom.*;
    import flash.events.*;

    public class VolumeSlider extends MovieClip {

        public var volumeSliderFill:MovieClip;
        public var currentVolume:Number = 0.75;

        public function VolumeSlider(){
            this.scrollRect = new Rectangle(0, -((this.height / 2)), this.width, this.height);
            this.buttonMode = true;
            this.addEventListener(MouseEvent.CLICK, this.snapTo);
            this.setVolume(this.currentVolume);
        }
        function snapTo(_arg1:MouseEvent):void{
            var _local2:Number;
            if ((((mouseX < 175)) && ((mouseX > 0)))){
                _local2 = (mouseX / 175);
                this.setVolume(_local2);
            };
        }
        function getVolume():Number{
            return (this.currentVolume);
        }
        function toggleVol(_arg1:MouseEvent):void{
            this.setVolume(0);
        }
        public function setVolume(_arg1:Number, _arg2:Boolean=false):void{
            this.volumeSliderFill.x = (-(this.volumeSliderFill.width) + (this.volumeSliderFill.width * _arg1));
            this.currentVolume = _arg1;
            if (_arg2 == false){
                dispatchEvent(new Event("changeVolume", true, true));
            };
        }

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;

    public class PlayerSmHeader extends MovieClip {

        public var mcRefreshStream:MovieClip;
        public var channel_name:TextField;
        public var mcConfigStream:MovieClip;
        public var num_viewers:TextField;
        public var player_num:TextField;
        public var chat:MovieClip;

        public function PlayerSmHeader(){
            this.chat.buttonMode = true;
            this.chat.gotoAndStop(2);
            this.chat.addEventListener(MouseEvent.CLICK, this.chatClickHandler);
            this.mcConfigStream.buttonMode = true;
            this.mcConfigStream.addEventListener(MouseEvent.CLICK, this.mcConfigStreamClickHandler);
            this.mcRefreshStream.buttonMode = true;
            this.mcRefreshStream.addEventListener(MouseEvent.CLICK, this.mcRefreshStreamClickHandler);
        }
        function chatClickHandler(_arg1:MouseEvent):void{
            var _local2:String = _arg1.target.parent.parent.parent.name;
            RiotPlayer.instance.clearChats();
            _local2 = _local2.replace("player", "");
            if (this.chat.currentFrame == 2){
                this.chat.gotoAndStop(1);
            } else {
                this.chat.gotoAndStop(2);
            };
        }
        function mcRefreshStreamClickHandler(_arg1:MouseEvent):void{
            var _local2:String = _arg1.target.parent.parent.name;
            trace((("STREAMRIOT: calling refreshStream(" + _local2) + ")"));
        }
        function mcConfigStreamClickHandler(_arg1:MouseEvent):void{
            if (_arg1.target.parent.parent.mcStreamConfig.visible == true){
                _arg1.target.parent.parent.mcStreamConfig.visible = false;
            } else {
                _arg1.target.parent.parent.mcStreamConfig.visible = true;
            };
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class MoveStream extends MovieClip {

        public var MovePos5:MovieClip;
        public var MovePos1:MovieClip;
        public var MovePos2:MovieClip;
        public var MovePos3:MovieClip;
        public var MovePos4:MovieClip;

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.geom.*;
    import flash.events.*;

    public class PlayerControlsMain extends MovieClip {

        public var playPause:MovieClip;
        public var toggleHD:MovieClip;
        public var volumeSlider:VolumeSlider;
        public var fullScreen:MovieClip;
        public var volumeIcon:MovieClip;
        var blnMute:Boolean = false;
        var nVol:Number;
        var currentQuality:String;
        var isFullscreen:Boolean = false;

        public function PlayerControlsMain(){
            this.currentQuality = "low";
            this.initControls();
            this.playPause.buttonMode = true;
            this.volumeIcon.buttonMode = true;
            this.fullScreen.buttonMode = true;
            this.toggleHD.buttonMode = true;
            this.playPause.addEventListener(MouseEvent.CLICK, this.togglePlay);
            this.fullScreen.addEventListener(MouseEvent.CLICK, this.onFullscreen);
            this.toggleHD.addEventListener(MouseEvent.CLICK, this.toggleQuality);
            this.volumeIcon.addEventListener(MouseEvent.CLICK, this.muteHandler);
            this.addEventListener("changeVolume", this.onChangeVolume);
            this.addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
        }
        function onAddedToStage(_arg1:Event):void{
            stage.addEventListener(Event.FULLSCREEN, this.onFullscreenHandler);
        }
        function initControls(){
            if (this.currentQuality == "low"){
                this.toggleHD.transform.colorTransform = new ColorTransform(0, 0, 0, 1, 160, 170, 180, 0);
            } else {
                this.toggleHD.transform.colorTransform = new ColorTransform(0, 0, 0, 1, 0xFF, 0xFF, 0xFF, 0);
            };
            this.playPause.gotoAndStop(0);
            this.fullScreen.gotoAndStop(0);
            this.volumeIcon.gotoAndStop(0);
            this.volumeSlider.setVolume(0.75, true);
        }
        function setVolume(_arg1:Number):void{
            if (_arg1 != 0){
                this.blnMute = false;
            };
            if ((((_arg1 >= 0)) && ((_arg1 <= 0.1)))){
                this.volumeIcon.gotoAndStop(1);
            } else {
                if ((((_arg1 >= 0.1)) && ((_arg1 < 0.5)))){
                    this.volumeIcon.gotoAndStop(2);
                } else {
                    if ((((_arg1 >= 0.5)) && ((_arg1 < 0.75)))){
                        this.volumeIcon.gotoAndStop(3);
                    } else {
                        if ((((_arg1 >= 0.75)) && ((_arg1 <= 1)))){
                            this.volumeIcon.gotoAndStop(4);
                        } else {
                            this.volumeIcon.gotoAndStop(1);
                        };
                    };
                };
            };
        }
        function onChangeVolume(_arg1:Event):void{
            var _local2:Number = _arg1.target.currentVolume;
            this.setVolume(_local2);
        }
        function togglePlay(_arg1:MouseEvent):void{
            if (this.playPause.currentFrame == 1){
                dispatchEvent(new Event("streamPaused", true, true));
                this.playPause.gotoAndStop(2);
            } else {
                dispatchEvent(new Event("streamPlayed", true, true));
                this.playPause.gotoAndStop(1);
            };
        }
        function onFullscreen(_arg1:MouseEvent):void{
            this.toggleFullscreen();
        }
        function onFullscreenHandler(_arg1:Event):void{
            this.toggleFullscreen();
        }
        function toggleFullscreen():void{
            if (this.isFullscreen == true){
                stage.displayState = StageDisplayState.NORMAL;
                this.fullScreen.gotoAndStop(0);
                this.isFullscreen = false;
            } else {
                stage.displayState = StageDisplayState.FULL_SCREEN;
                stage.align = "";
                this.fullScreen.gotoAndStop(0);
                this.isFullscreen = true;
            };
            stage.align = "";
        }
        function toggleQuality(_arg1:MouseEvent):void{
            if (this.toggleHD.currentFrame == 2){
                this.setQuality("low");
                this.toggleHD.transform.colorTransform = new ColorTransform(0, 0, 0, 1, 160, 170, 180, 0);
            } else {
                this.toggleHD.transform.colorTransform = new ColorTransform(0, 0, 0, 1, 160, 170, 180, 0);
                this.setQuality("high");
            };
        }
        function getQuality():String{
            return (this.currentQuality);
        }
        function setQuality(_arg1:String):void{
            this.currentQuality = _arg1;
            dispatchEvent(new Event("qualityChanged", true, true));
        }
        function muteHandler(_arg1:MouseEvent):void{
            if (this.blnMute == true){
                this.volumeSlider.setVolume(this.nVol);
                this.blnMute = false;
            } else {
                this.blnMute = true;
                this.nVol = this.volumeSlider.getVolume();
                this.volumeSlider.setVolume(0);
            };
        }

    }
}//package 
﻿package fl.core {
    import flash.display.*;

    public dynamic class ComponentShim extends MovieClip {

    }
}//package fl.core 
﻿package {
    import flash.display.*;
    import com.demonsters.debugger.*;
    import flash.events.*;
    import flash.utils.*;
    import com.greensock.loading.*;
    import com.greensock.events.*;
    import com.greensock.loading.display.*;
    import flash.system.*;
    import com.streamriot.*;
    import flash.external.*;

    public class RiotPlayer extends MovieClip {

        private static var _instance:RiotPlayer;

        public var objStreams:Object;
        public var loaders:Object;
        public var playerLoaders:Object;
        public var currentLayout:String;
        public var numPlayers:Number;
        public var queue:LoaderMax;
        public var dWidth:Number = 620;
        public var dHeight:Number = 378;
        var srLoader:SRLoader;
        var iCurLayout:Number = 0;

        public function RiotPlayer(){
            var oConfig:* = null;
            var i:* = NaN;
            this.objStreams = new Object();
            this.loaders = new Object();
            this.playerLoaders = new Object();
            this.queue = new LoaderMax({
                name:"loaders",
                onScriptAccessDenied:this.onScriptAccessDeniedHandler,
                onProgress:this.progressHandler,
                onComplete:this.completeHandler,
                onError:this.errorHandler,
                auditSize:false
            });
            this.srLoader = new SRLoader(true);
            super();
            addFrameScript(0, this.frame1);
            MonsterDebugger.initialize(this);
            stage.addEventListener(Event.RESIZE, function (_arg1:Event){
                stage.scaleMode = StageScaleMode.SHOW_ALL;
            });
            var moveTimer:* = new Timer(1500);
            _instance = this;
            Security.allowDomain("*");
            Security.allowInsecureDomain("*");
            this.addEventListener("swapPlayers", this.onSwapPlayers);
            this.addEventListener("makeActive", this.onMakeActive);
            this.addEventListener("closePlayer", this.onClosePlayer);
            this.addEventListener("removeStream", this.onRemoveStream);
            this.addEventListener("loadComplete", this.onLoadComplete);
            this.addEventListener("onPlayerAddedToStage", this.onPlayerAddedToStage);
            this.addEventListener("updateLayout", this.updateLayout);
            if (ExternalInterface.available){
                ExternalInterface.addCallback("loadPlayers", this.loadPlayers);
                ExternalInterface.addCallback("updateLayout", this.updateLayout);
                ExternalInterface.addCallback("updateStream", this.updateStream);
                ExternalInterface.addCallback("updateStreams", this.updateStreams);
                ExternalInterface.addCallback("fullScreen", this.fullScreen);
                ExternalInterface.call("LoadStreams");
            };
            var debug:* = false;
            if (debug){
                oConfig = new Object();
                oConfig.num_players = 1;
                i = 1;
                while (i <= oConfig.num_players) {
                    this.objStreams[i] = new Object();
                    this.objStreams[i].channel_name = "tsm_theoddone";
                    this.objStreams[i].src = "http://www.twitch.tv/widgets/live_embed_player.swf?channel=tsm_theoddone";
                    this.objStreams[i].num_viewers = (462 * i);
                    this.objStreams[i].position = i;
                    this.objStreams[i].current_pos = i;
                    this.objStreams[i].stream_id = i;
                    this.objStreams[i].provider = "twitch.tv";
                    i = (i + 1);
                };
                oConfig.streams = this.objStreams;
                this.loadPlayers(oConfig);
                this.updateLayout((oConfig.num_players + "-1"));
            };
            var ctrl:* = new PlayerControlsMain();
            ctrl.x = 0;
            ctrl.y = (stage.stageHeight - ctrl.height);
            ctrl.name = "ctrls";
            addChild(ctrl);
            trace("added controls");
        }
        public static function get instance():RiotPlayer{
            return (_instance);
        }

        function onTimer(_arg1:TimerEvent):void{
            var _local2:Array = new Array();
            _local2.push("1-1");
            _local2.push("2-1");
            _local2.push("2-2");
            _local2.push("2-3");
            _local2.push("3-1");
            _local2.push("3-2");
            _local2.push("4-1");
            _local2.push("4-2");
            _local2.push("4-3");
            _local2.push("5-1");
            _local2.push("5-2");
            this.updateLayout(_local2[this.iCurLayout]);
            this.iCurLayout++;
            if (this.iCurLayout == 11){
                this.iCurLayout = 0;
            };
        }
        function onPlayerAddedToStage(_arg1:Event):void{
            this.updateLayout(this.currentLayout);
        }
        function onLoadComplete(_arg1:Event):void{
            var _local2:String = _arg1.target.name;
            var _local3:* = (this.getChildByName(_local2) as MovieClip);
            _local3.hideLoader();
        }
        public function fullScreen():void{
            var _local1:* = (this.getChildByName(this.playerLoaders["1"]) as MovieClip);
            _local1.overlay.ctls.toggleFullscreen();
        }
        function onSwapPlayers(_arg1:Event):void{
            var _local2:Number = _arg1.target.thisNum;
            var _local3:Number = _arg1.target.thatNum;
            this.swapPlayers(_local2, _local3);
        }
        function onMakeActive(_arg1:Event):void{
            var _local2:Number = _arg1.target.playerNum;
            var _local3:Number = 1;
            this.swapPlayers(_local2, _local3);
        }
        function onClosePlayer(_arg1:Event):void{
            this.closePlayer(_arg1.target.strLoader);
        }
        function onRemoveStream(_arg1:Event):void{
            this.removeStream(_arg1.target.strLoader);
        }
        function initLoader():void{
            trace("STREAMRIOT: initLoader called");
            addChild(this.srLoader);
            this.srLoader.x = ((stage.stageWidth - this.srLoader.width) / 2);
            this.srLoader.y = ((stage.stageHeight - this.srLoader.height) / 2);
            this.srLoader.showLoader();
        }
        function updateLoader(_arg1:Number):void{
            this.srLoader.showProgress(_arg1);
        }
        function closeLoader():void{
            try {
                removeChild(this.srLoader);
            } catch(e:Error) {
            };
        }
        function closePlayer(_arg1:String):void{
            var _local2:* = (this.getChildByName(_arg1) as MovieClip);
            var _local3:Number = _local2.playerNum;
            this.removeStream(_arg1);
            this.ShiftPlayers(_local3);
        }
        function swapPlayers(_arg1:Number, _arg2:Number):void{
            var _local5:*;
            var _local6:*;
            var _local3:String = this.playerLoaders[_arg1];
            var _local4:String = this.playerLoaders[_arg2];
            _local5 = (this.getChildByName(_local3) as MovieClip);
            _local6 = (this.getChildByName(_local4) as MovieClip);
            this.playerLoaders[_arg1] = _local4;
            this.playerLoaders[_arg2] = _local3;
            _local5.updatePlayer(_arg2);
            _local6.updatePlayer(_arg1);
            if (_arg2 > this.numPlayers){
                this.currentLayout = (String(_arg2) + "-1");
                this.numPlayers = _arg2;
            };
            this.updateLayout(this.currentLayout);
        }
        function arrangePlayer(_arg1:String):void{
            var _local2:* = (this.getChildByName(_arg1) as MovieClip);
            _local2.arrangePlayer();
        }
        function ShiftPlayers(_arg1:Number):void{
            var _local4:Number;
            var _local6:Number;
            var _local9:*;
            var _local2:Number = _arg1;
            var _local3:String = this.currentLayout;
            var _local5:Object = new Object();
            var _local7:String = this.playerLoaders[_arg1];
            var _local8:String = this.playerLoaders[_local4];
            _local3 = _local3.substr(0, 1);
            _local4 = Number(this.currentLayout.substr(0, 1));
            var _local10:Number = _arg1;
            while (_local10 <= _local4) {
                if (_local10 == _local4){
                    this.playerLoaders[_local10] = _local7;
                    _local9 = (this.getChildByName(_local7) as MovieClip);
                    _local9.updatePlayer(_local10);
                } else {
                    _local6 = (_local10 + 1);
                    this.playerLoaders[_local10] = this.playerLoaders[_local6];
                    _local9 = (this.getChildByName(this.playerLoaders[_local6]) as MovieClip);
                    _local9.updatePlayer(_local10);
                };
                _local10++;
            };
            _local4--;
            _local3 = (String(_local4) + "-1");
            this.updateLayout(_local3);
        }
        function removeStream(_arg1:String):void{
            var _local2:* = (this.getChildByName(_arg1) as MovieClip);
            removeChild(_local2);
            _local2.removeStream();
            if (ExternalInterface.available){
                ExternalInterface.call("removeChat", _local2.obj);
            };
        }
        function clearChats():void{
            trace("STREAMRIOT: clearChats() called");
        }
        function getPlayer(_arg1:String):MovieClip{
            return ((this.getChildByName(_arg1) as MovieClip));
        }
        function addPlayer(_arg1:Object, _arg2:Number, _arg3:String):MovieClip{
            var _local4 = this.getPlayer(_arg3);
            if (_local4){
                this.removeStream(_arg3);
            };
            _local4 = null;
            this.playerLoaders[_arg2] = _arg3;
            if ((((_arg1.provider == "justin.tv")) || ((_arg1.provider == "twitch.tv")))){
                _local4 = new SRPlayerTwitch(_arg3, _arg2);
            } else {
                if (_arg1.provider == "ustream.tv"){
                    _local4 = new SRPlayerUStream(_arg3, _arg2);
                };
            };
            _local4.visible = false;
            addChild(_local4);
            trace("STREAMRIOT: added player to stage");
            return (_local4);
        }
        function loadPlayers(_arg1:Object){
            var _local2:Object;
            var _local3:String;
            var _local4:String;
            var _local5:*;
            var _local7:Boolean;
            var _local9:String;
            this.objStreams = _arg1.streams;
            trace("loading streams");
            this.initLoader();
            var _local6:LoaderContext = new LoaderContext(true);
            _local6.applicationDomain = new ApplicationDomain();
            LoaderMax.defaultContext = _local6;
            LoaderMax.defaultAuditSize = true;
            LoaderMax.defaultEstimatedBytes = 100000;
            this.queue.maxConnections = 3;
            this.queue.autoLoad = true;
            this.numPlayers = _arg1.num_players;
            this.currentLayout = (String(this.numPlayers) + "-1");
            var _local8:Number = 1;
            while (_local8 <= 5) {
                _local7 = false;
                _local4 = ("player" + _local8);
                _local3 = String(_local8);
                this.playerLoaders[_local3] = _local4;
                this.loaders[_local8] = null;
                if (_local8 == 1){
                    _local7 = true;
                };
                _local5 = new SRPlayer(_local4, _local8, _local7);
                _local5.visible = false;
                addChild(_local5);
                _local8++;
            };
            _local8 = 0;
            for (_local9 in this.objStreams) {
                _local2 = this.objStreams[_local9];
                if (_local8 <= _arg1.num_players){
                    if (_local2.position <= this.numPlayers){
                        _local8++;
                        trace(("STREAMRIOT: appending to queue " + _local2.src));
                        _local4 = ("player" + _local2.position);
                        _local5 = this.addPlayer(_local2, _local2.position, _local4);
                        this.queue.append(_local5.addLoader(_local2, false));
                    };
                };
            };
        }
        function updateStreams(_arg1:Object){
            this.objStreams = _arg1.streams;
        }
        function checkResize(_arg1:Event):void{
            var swf:* = null;
            var strLoader:* = null;
            var p:* = null;
            var event:* = _arg1;
            if (event == null){
                return;
            };
            trace("STREAMRIOT: check resize called");
            var blnComplete:* = true;
            for (p in this.playerLoaders) {
                strLoader = this.playerLoaders[p];
                swf = LoaderMax.getLoader(strLoader);
                try {
                    if (swf.rawContent.width){
                        trace("STREAMRIOT: checkResize called, this shouldnt be frequent");
                    } else {
                        blnComplete = false;
                    };
                } catch(e:Error) {
                    blnComplete = false;
                };
            };
            if (blnComplete == true){
                removeEventListener(Event.ENTER_FRAME, this.checkResize);
            };
        }
        function progressHandler(_arg1:LoaderEvent):void{
            trace(("STREAMRIOT: Queue progress: " + _arg1.target.progress));
            this.updateLoader(_arg1.target.progress);
        }
        function completeHandler(_arg1:LoaderEvent):void{
            var _local2:Object;
            var _local3:Number;
            var _local4:String;
            var _local5:ContentDisplay;
            var _local6:MovieClip;
            var _local7:String;
            var _local8:String;
            var _local9:Number = 0;
            trace("SR: closing loader");
            this.closeLoader();
            trace("SR: updating layout");
            this.updateLayout(this.currentLayout);
        }
        function onScriptAccessDeniedHandler(_arg1:LoaderEvent){
            trace(("SR: security error: " + _arg1.text));
        }
        function setPlayerSize(_arg1:Number, _arg2:String):void{
            var lgh:* = NaN;
            var lgw:* = NaN;
            var nPlayer:* = _arg1;
            var strLayout:* = _arg2;
            var h:* = 378;
            var w:* = 620;
            var sh:* = stage.stageHeight;
            var sw:* = stage.stageWidth;
            var bw:* = 620;
            var bh:* = 378;
            var strPlayer:* = this.playerLoaders[nPlayer];
            var ctrls:* = (this.getChildByName("ctrls") as MovieClip);
            try {
                sh = (sh - ctrls.height);
            } catch(e:Error) {
            };
            switch (strLayout){
                case "1-1":
                    lgw = sw;
                    lgh = (bh * (sw / bw));
                    h = lgh;
                    w = lgw;
                    break;
                case "2-1":
                    lgh = ((sh / 2) - 5);
                    lgw = (bw * (lgh / bh));
                    h = lgh;
                    w = lgw;
                    break;
                case "2-2":
                    lgw = ((sw / 2) - 5);
                    lgh = (bh * (lgw / bw));
                    h = lgh;
                    w = lgw;
                    break;
                case "2-3":
                    lgw = sw;
                    lgh = sh;
                    h = (lgh * 0.3);
                    w = (lgw * 0.3);
                    break;
                case "3-1":
                    lgh = (((sh / 3) * 2) - 5);
                    lgw = (bw * (lgh / bh));
                    h = ((sh - lgh) - 10);
                    w = (bw * (h / bh));
                    break;
                case "3-2":
                    lgw = (((sw / 3) * 2) - 5);
                    lgh = (bh * (lgw / bw));
                    w = ((sw - lgw) - 15);
                    h = (bh * (w / bw));
                    break;
                case "4-1":
                    lgh = (((sh / 4) * 3) - 5);
                    lgw = (bw * (lgh / bh));
                    h = ((sh - lgh) - 5);
                    w = (bw * (h / bh));
                    break;
                case "4-2":
                    lgw = (((sw / 4) * 3) - 5);
                    lgh = (bh * (lgw / bw));
                    w = ((sw - lgw) - 15);
                    h = (bh * (w / bw));
                    break;
                case "4-3":
                    lgw = ((sw / 2) - 5);
                    lgh = (bh * (lgw / bw));
                    h = lgh;
                    w = lgw;
                    break;
                case "5-1":
                    lgw = (((sw / 3) * 2) - 10);
                    lgh = (bh * (lgw / bh));
                    h = ((sh / 4) - 10);
                    w = (bw * (h / bh));
                    break;
                case "5-2":
                    lgh = (((sh / 4) * 3) - 10);
                    lgw = (bw * (lgh / bh));
                    w = ((sw / 4) - 10);
                    h = (bh * (w / bw));
                    break;
            };
            if (nPlayer == 1){
                h = lgh;
                w = lgw;
            };
            try {
                trace(((((("STREAMRIOT: player #" + nPlayer) + " with loader attempting to change size ") + w) + "x") + h));
                this.resizeMe(strPlayer, w, h);
            } catch(e:Error) {
                trace(("STREAMRIOT: error changing size of player: " + e.message));
            };
        }
        function errorHandler(_arg1:LoaderEvent):void{
            trace(((("STREAMRIOT: error occured with " + _arg1.target) + ": ") + _arg1.text));
        }
        function updateStats(_arg1:String=""):void{
            var _local3:*;
            if (_arg1 != ""){
                _local3 = (this.getChildByName(_arg1) as MovieClip);
                _local3.updateStats();
                return;
            };
            var _local2:Number = 1;
            while (_local2 <= 5) {
                _local3 = (this.getChildByName(("player" + _local2)) as MovieClip);
                _local3.updateStats();
                _local2++;
            };
        }
        function resizeMe(_arg1:String, _arg2:Number, _arg3:Number=0, _arg4:Boolean=false):void{
            trace(("STREAMRIOT: resizing player " + _arg1));
            var _local5:MovieClip = this.getPlayer(_arg1);
            var _local6:Number = Math.min((_arg2 / 620), (_arg3 / 378));
            _local5.scaleX = (_local5.scaleY = _local6);
            _local5.onResize(_local6);
        }
        public function updateLayout(_arg1:String=""):void{
            var _local7:Number;
            var _local8:Number;
            var _local11:String;
            var _local2:Number = 620;
            var _local3:Number = 378;
            var _local4:Number = stage.stageWidth;
            var _local5:Number = stage.stageHeight;
            var _local6:Number = 10;
            var _local9:Object = new Object();
            if (_arg1 == ""){
                _arg1 = this.currentLayout;
            };
            var _local10:Number = Number(_arg1.substr(0, 1));
            trace(("stageWidth: " + _local4));
            trace(("stageHeight: " + _local5));
            this.numPlayers = _local10;
            _local2 = this.dWidth;
            _local3 = this.dHeight;
            this.currentLayout = _arg1;
            trace(("STREAMRIOT: attempting to update layout to " + _arg1));
            this.setPlayerSize(1, _arg1);
            this.setPlayerSize(2, _arg1);
            this.setPlayerSize(3, _arg1);
            this.setPlayerSize(4, _arg1);
            this.setPlayerSize(5, _arg1);
            for (_local11 in this.playerLoaders) {
                _local9[_local11] = this.getPlayer(this.playerLoaders[_local11]);
                _local9[_local11].visible = false;
            };
            try {
                switch (_local10){
                    case 1:
                        _local9["1"].visible = true;
                        break;
                    case 2:
                        _local9["1"].visible = true;
                        _local9["2"].visible = true;
                        break;
                    case 3:
                        _local9["1"].visible = true;
                        _local9["2"].visible = true;
                        _local9["3"].visible = true;
                        break;
                    case 4:
                        _local9["1"].visible = true;
                        _local9["2"].visible = true;
                        _local9["3"].visible = true;
                        _local9["4"].visible = true;
                        break;
                    case 5:
                        _local9["1"].visible = true;
                        _local9["2"].visible = true;
                        _local9["3"].visible = true;
                        _local9["4"].visible = true;
                        _local9["5"].visible = true;
                        break;
                };
                switch (_arg1){
                    case "1-1":
                        _local9["1"].x = 0;
                        _local9["1"].y = _local6;
                        break;
                    case "2-1":
                        _local9["1"].x = ((_local4 / 2) - (_local9["1"].width / 2));
                        _local9["1"].y = 2;
                        _local9["2"].x = _local9["1"].x;
                        _local9["2"].y = ((_local9["1"].y + _local9["1"].height) + 10);
                        break;
                    case "2-2":
                        _local9["1"].x = (((_local4 / 2) - _local9["1"].width) - 5);
                        _local9["1"].y = ((_local5 / 2) - (_local9["1"].height / 2));
                        _local9["2"].x = ((_local9["1"].x + _local9["1"].width) + 5);
                        _local9["2"].y = _local9["1"].y;
                        break;
                    case "2-3":
                        _local9["1"].x = 0;
                        _local9["1"].y = 2;
                        _local9["2"].x = (_local9["1"].x + 45);
                        _local9["2"].y = (((_local9["1"].y + _local9["1"].height) - _local9["2"].height) - 60);
                        break;
                    case "3-1":
                        _local9["1"].x = ((_local4 / 2) - (_local9["1"].width / 2));
                        _local9["1"].y = 2;
                        _local9["2"].x = _local9["1"].x;
                        _local9["2"].y = ((_local9["1"].y + _local9["1"].height) + 7);
                        _local9["3"].x = ((_local9["1"].x + _local9["1"].width) - _local9["3"].width);
                        _local9["3"].y = _local9["2"].y;
                        break;
                    case "3-2":
                        _local9["1"].x = ((_local4 / 2) - ((_local9["1"].width / 4) * 3));
                        _local9["1"].y = 10;
                        _local9["2"].x = ((_local9["1"].x + _local9["1"].width) + 10);
                        _local9["2"].y = 10;
                        _local9["3"].x = _local9["2"].x;
                        _local9["3"].y = ((_local9["2"].y + _local9["2"].height) + 10);
                        break;
                    case "4-1":
                        _local9["1"].x = ((_local4 / 2) - (_local9["1"].width / 2));
                        _local9["1"].y = 1;
                        _local9["3"].x = ((_local9["1"].x + (_local9["1"].width / 2)) - (_local9["3"].width / 2));
                        _local9["3"].y = ((_local9["1"].y + _local9["1"].height) + 3);
                        _local9["2"].x = ((_local9["3"].x - _local9["2"].width) - 5);
                        _local9["2"].y = _local9["3"].y;
                        _local9["4"].x = ((_local9["3"].x + _local9["3"].width) + 5);
                        _local9["4"].y = _local9["3"].y;
                        break;
                    case "4-2":
                        _local9["1"].x = ((_local4 / 2) - ((_local9["1"].width / 3) * 2));
                        _local9["1"].y = 10;
                        _local9["2"].x = ((_local9["1"].x + _local9["1"].width) + 10);
                        _local9["2"].y = 10;
                        _local9["3"].x = _local9["2"].x;
                        _local9["3"].y = ((_local9["2"].y + _local9["2"].height) + 10);
                        _local9["4"].x = _local9["2"].x;
                        _local9["4"].y = ((_local9["3"].y + _local9["2"].height) + 10);
                        break;
                    case "4-3":
                        _local9["1"].x = (((_local4 / 2) - _local9["1"].width) - 5);
                        _local9["1"].y = 5;
                        _local9["2"].x = ((_local9["1"].x + _local9["1"].width) + 5);
                        _local9["2"].y = 5;
                        _local9["3"].x = _local9["1"].x;
                        _local9["3"].y = ((_local9["1"].y + _local9["1"].height) + 5);
                        _local9["4"].x = _local9["2"].x;
                        _local9["4"].y = ((_local9["2"].y + _local9["2"].height) + 5);
                        break;
                    case "5-1":
                        _local9["1"].x = ((_local4 / 2) - ((_local9["1"].width / 4) * 3));
                        _local9["1"].y = ((_local5 / 2) - (_local9["1"].height / 2));
                        _local9["2"].x = ((_local9["1"].x + _local9["1"].width) + 10);
                        _local9["2"].y = 5;
                        _local9["3"].x = _local9["2"].x;
                        _local9["3"].y = ((_local9["2"].y + _local9["2"].height) + 10);
                        _local9["4"].x = _local9["2"].x;
                        _local9["4"].y = ((_local9["3"].y + _local9["3"].height) + 10);
                        _local9["5"].x = _local9["2"].x;
                        _local9["5"].y = ((_local9["4"].y + _local9["4"].height) + 10);
                        break;
                    case "5-2":
                        _local9["1"].x = ((_local4 / 2) - (_local9["1"].width / 2));
                        _local9["1"].y = 5;
                        _local9["3"].x = (((_local9["1"].x + (_local9["1"].width / 2)) - 5) - _local9["3"].width);
                        _local9["3"].y = ((_local9["1"].y + _local9["1"].height) + 5);
                        _local9["2"].x = ((_local9["3"].x - _local9["2"].width) - 10);
                        _local9["2"].y = _local9["3"].y;
                        _local9["4"].x = ((_local9["3"].x + _local9["3"].width) + 10);
                        _local9["4"].y = _local9["3"].y;
                        _local9["5"].x = ((_local9["4"].x + _local9["4"].width) + 10);
                        _local9["5"].y = _local9["3"].y;
                        break;
                };
            } catch(e:Error) {
            };
            stage.scaleMode = StageScaleMode.SHOW_ALL;
            try {
                this.setChildIndex(_local9["1"], (this.numChildren - 1));
                this.setChildIndex(_local9["2"], (this.numChildren - 1));
                this.setChildIndex(_local9["3"], (this.numChildren - 1));
                this.setChildIndex(_local9["4"], (this.numChildren - 1));
                this.setChildIndex(_local9["5"], (this.numChildren - 1));
            } catch(e:Error) {
            };
        }
        function updateStream(_arg1:Number, _arg2:String){
            var _local5:*;
            var _local3:String = this.playerLoaders[_arg1];
            var _local4:Object = this.objStreams[_arg2];
            this.objStreams[_arg2].player_num = _arg1;
            this.removeStream(_local3);
            _local5 = this.addPlayer(_local4, _arg1, _local3);
            this.queue.append(_local5.addLoader(_local4));
            try {
                ExternalInterface.call("updateChat", _local4);
            } catch(e:Error) {
            };
            if (Number(_arg1) > this.numPlayers){
                this.currentLayout = (_arg1 + "-1");
                this.numPlayers = Number(_arg1);
                this.updateStats();
            };
        }
        function updateStreamProgress(_arg1:LoaderEvent):void{
            var _local2:String = _arg1.target.name;
            var _local3:* = (this.getChildByName(_local2) as MovieClip);
            _local3.loaderProgress(_arg1.target.progress);
            trace(("STREAMRIOT: updateStreamProgress progress: " + _arg1.target.name));
        }
        function frame1(){
            stage.showDefaultContextMenu = false;
            stage.scaleMode = StageScaleMode.SHOW_ALL;
            stage.align = StageAlign.TOP;
        }

    }
}//package 
﻿package {
    import flash.text.*;

    public dynamic class Font3 extends Font {

    }
}//package 
﻿package com.streamriot {
    import flash.display.*;
    import com.demonsters.debugger.*;
    import com.greensock.loading.*;
    import com.greensock.events.*;
    import com.greensock.loading.display.*;

    public class SRPlayerTwitch extends SRPlayer {

        var numAdStarted:Number = 0;
        public var TwitchPlayerClass:Class;
        public var TwitchPlayerObject:Object;
        public var TwitchEventClass:Class;
        public var TwitchEventObject;

        public function SRPlayerTwitch(_arg1:String, _arg2:Number, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        override public function onLoaderComplete(_arg1:LoaderEvent):void{
            var _local2:SWFLoader = LoaderMax.getLoader(this.name);
            this.scaleX = (this.scaleY = 1);
            this.TwitchEventClass = swfLoader.rawContent.loaderInfo.applicationDomain.getDefinition("tv.twitch.gui.skins.ControlBarEvent");
            MonsterDebugger.trace("TwitchEventClass", this.TwitchEventClass);
            var _local3:Sprite = (_local2.rawContent.getChildAt(0) as Sprite);
            var _local4:Sprite = (_local3.getChildAt(1) as Sprite);
            var _local5:Sprite = (_local3.getChildAt(0) as Sprite);
            var _local6:Sprite = (_local5.getChildAt(3) as Sprite);
            var _local7:Number = Math.min((_local5.width / _local3.width), (_local5.height / _local3.height));
            _local6.height = 0;
            _local6.width = 0;
            _local5.scaleX = (_local5.scaleY = 1);
            _local4.visible = false;
            _local4.height = 0;
            _local7 = Math.min((dWidth / _local2.rawContent.width), (dHeight / _local2.rawContent.height));
            _local2.rawContent.scaleX = (_local2.rawContent.scaleY = _local7);
            MonsterDebugger.trace("twitch player loader loaded", null);
            super.onLoaderComplete(_arg1);
        }
        override public function onResize(_arg1:Number):void{
        }
        override public function initStream(_arg1:Boolean=false):void{
            super.initStream(_arg1);
            try {
            } catch(e:Error) {
            };
        }
        override public function checkFrozen():Boolean{
            var ad_running:* = false;
            var curDate:* = null;
            var curTime:* = NaN;
            var maxTime:* = NaN;
            return (false);
        }
        override public function validateSwf():Boolean{
            try {
            } catch(e:Error) {
                return (false);
            };
            return (true);
        }
        override public function setVolume(_arg1:Number, _arg2:Boolean=true):Boolean{
            var objInfo:* = null;
            var TwitchEvent:* = undefined;
            var pct:* = _arg1;
            var blnSave:Boolean = _arg2;
            try {
                trace(("STREAMRIOT: changing twitch volume: " + pct));
                objInfo = new Object();
                objInfo.volume = pct;
                TwitchEvent = new this.TwitchEventClass("controlVolume", objInfo);
                api.getChildAt(0).dispatchEvent(TwitchEvent);
                super.setVolume(pct, blnSave);
                return (true);
            } catch(e:Error) {
                trace(("STREAMRIOT: error changing twitch volume: " + e.message));
                return (false);
            };
            return (true);
        }
        override public function stopStream():void{
        }
        override public function pauseStream():Boolean{
            var TwitchEvent:* = new this.TwitchEventClass("controlPause");
            api.getChildAt(0).dispatchEvent(TwitchEvent);
            return (true);
        }
        override public function changeQuality(_arg1:String="low"):Boolean{
            var objInfo:* = null;
            var TwitchEvent:* = undefined;
            var strQuality:String = _arg1;
            try {
                objInfo = new Object();
                objInfo.item = strQuality;
                TwitchEvent = new this.TwitchEventClass("controlQuality", objInfo);
                api.getChildAt(0).dispatchEvent(TwitchEvent);
            } catch(e:Error) {
                trace(("SR: error changing quality " + e.message));
                return (false);
            };
            return (true);
        }
        override public function playStream(_arg1:String="low"):Boolean{
            var strQuality:String = _arg1;
            var TwitchEvent:* = new this.TwitchEventClass("controlPause");
            api.getChildAt(0).dispatchEvent(TwitchEvent);
            return (true);
        }

        MonsterDebugger.trace("twitch player", null);
    }
}//package com.streamriot 
﻿package com.streamriot {
    import flash.display.*;
    import com.greensock.loading.*;
    import flash.net.*;
    import com.greensock.events.*;
    import com.greensock.loading.display.*;
    import flash.system.*;
    import flash.external.*;

    public class SRPlayerUStream extends SRPlayer {

        var uStreamViewerRSLLoader:Loader;
        var uStreamViewerRSLContext:LoaderContext;
        var uStreamViewerRSLRequest:URLRequest;
        var uStreamViewerLogicClass:Class;
        var uStreamViewerObject:Object;

        public function SRPlayerUStream(_arg1:String, _arg2:Number, _arg3:Boolean=false){
            this.uStreamViewerRSLLoader = new Loader();
            this.uStreamViewerRSLContext = new LoaderContext();
            this.uStreamViewerRSLRequest = new URLRequest("lib.ustream.viewer.rsl.swf");
            super(_arg1, _arg2, _arg3);
        }
        override public function onResize(_arg1:Number):void{
            var _local2:Number = (this.height / this.uStreamViewerObject.display.height);
            var _local3:Number = (this.width / this.uStreamViewerObject.display.width);
            var _local4 = "";
        }
        override public function arrangePlayer():void{
            super.arrangePlayer();
        }
        override public function onLoaderComplete(_arg1:LoaderEvent):void{
            var _local2:SWFLoader = LoaderMax.getLoader(this.name);
            this.scaleX = (this.scaleY = 1);
            this.uStreamViewerLogicClass = _local2.rawContent.loaderInfo.applicationDomain.getDefinition("tv.ustream.viewer.logic.Logic");
            this.uStreamViewerObject = new this.uStreamViewerLogicClass();
            this.uStreamViewerObject.display.height = dHeight;
            this.uStreamViewerObject.display.width = dWidth;
            this.addChild(this.uStreamViewerObject.display);
            this.uStreamViewerResizeViewer();
            this.uStreamViewerObject.createChannel(obj.channel);
            placeHolder.visible = false;
            setChildIndex(this.uStreamViewerObject.display, 1);
            super.onLoaderComplete(_arg1);
        }
        override public function setApi():Boolean{
            api = this.uStreamViewerObject.display;
            return (true);
        }
        override public function playStream(_arg1:String="low"):Boolean{
            this.uStreamViewerObject.createChannel(obj.channel);
            return (true);
        }
        override public function setVolume(_arg1:Number, _arg2:Boolean=true):Boolean{
            var pct:* = _arg1;
            var blnSave:Boolean = _arg2;
            try {
                trace(("STREAMRIOT: changing ustream volume: " + pct));
                this.uStreamViewerObject.volume = pct;
                super.setVolume(pct, blnSave);
                return (true);
            } catch(e:Error) {
                trace(("STREAMRIOT: error changing ustream volume: " + e.message));
                return (false);
            };
            return (true);
        }
        override public function pauseStream():Boolean{
            trace("STREAMRIOT: attempting to pause ustream");
            try {
                this.uStreamViewerObject.playing = false;
                return (true);
            } catch(e:Error) {
                trace(("STREAMRIOT: error pausing ustream: " + e.message));
                return (false);
            };
            return (true);
        }
        override public function stopStream():void{
            try {
                this.uStreamViewerObject.channel.playing = false;
            } catch(e:Error) {
                trace("STREAMRIOT: error stopping ustream");
            };
        }
        function uStreamViewerResizeViewer(){
            var _local1:Number = Math.min((dWidth / this.uStreamViewerObject.display.width), (dHeight / this.uStreamViewerObject.display.height));
            this.uStreamViewerObject.display.height = dHeight;
            this.uStreamViewerObject.display.width = dWidth;
        }

    }
}//package com.streamriot 
﻿package com.demonsters.debugger {

    class MonsterDebuggerConstants {

        static const ICON_DISPLAY_OBJECT:String = "iconDisplayObject";
        static const TYPE_BOOLEAN:String = "Boolean";
        static const TYPE_VECTOR:String = "Vector.";
        static const TYPE_XMLLIST:String = "XMLList";
        static const COMMAND_TRACE:String = "TRACE";
        static const ICON_ROOT:String = "iconRoot";
        static const TYPE_NOT_FOUND:String = "Not found";
        static const ACCESS_METHOD:String = "method";
        static const TYPE_XMLVALUE:String = "XMLValue";
        static const COMMAND_NOTFOUND:String = "NOTFOUND";
        static const COMMAND_MONITOR:String = "MONITOR";
        static const COMMAND_STOP_HIGHLIGHT:String = "STOP_HIGHLIGHT";
        static const ACCESS_CONSTANT:String = "constant";
        static const TYPE_FUNCTION:String = "Function";
        static const TYPE_UINT:String = "uint";
        static const COMMAND_INFO:String = "INFO";
        static const TYPE_INT:String = "int";
        static const TYPE_XMLATTRIBUTE:String = "XMLAttribute";
        static const COMMAND_SNAPSHOT:String = "SNAPSHOT";
        static const ICON_DEFAULT:String = "iconDefault";
        static const ICON_VARIABLE_READONLY:String = "iconVariableReadonly";
        static const COMMAND_BASE:String = "BASE";
        static const ICON_XMLATTRIBUTE:String = "iconXMLAttribute";
        static const TYPE_BYTEARRAY:String = "ByteArray";
        static const COMMAND_GET_PROPERTIES:String = "GET_PROPERTIES";
        static const TYPE_XML:String = "XML";
        static const TYPE_NULL:String = "null";
        static const TYPE_XMLNODE:String = "XMLNode";
        static const ICON_VARIABLE_WRITEONLY:String = "iconVariableWriteonly";
        static const TYPE_WARNING:String = "Warning";
        static const PERMISSION_READWRITE:String = "readwrite";
        static const PERMISSION_WRITEONLY:String = "writeonly";
        static const COMMAND_HIGHLIGHT:String = "HIGHLIGHT";
        static const TYPE_VOID:String = "void";
        static const ICON_VARIABLE:String = "iconVariable";
        static const TYPE_METHOD:String = "MethodClosure";
        static const COMMAND_GET_PREVIEW:String = "GET_PREVIEW";
        static const COMMAND_GET_FUNCTIONS:String = "GET_FUNCTIONS";
        static const COMMAND_HELLO:String = "HELLO";
        static const TYPE_UNREADABLE:String = "Unreadable";
        static const PERMISSION_READONLY:String = "readonly";
        static const ICON_XMLNODE:String = "iconXMLNode";
        static const COMMAND_CLEAR_TRACES:String = "CLEAR_TRACES";
        static const TYPE_STRING:String = "String";
        static const ACCESS_DISPLAY_OBJECT:String = "displayObject";
        static const COMMAND_RESUME:String = "RESUME";
        static const COMMAND_PAUSE:String = "PAUSE";
        static const COMMAND_START_HIGHLIGHT:String = "START_HIGHLIGHT";
        static const ICON_WARNING:String = "iconWarning";
        static const COMMAND_SET_PROPERTY:String = "SET_PROPERTY";
        static const ICON_XMLVALUE:String = "iconXMLValue";
        static const ACCESS_ACCESSOR:String = "accessor";
        static const COMMAND_CALL_METHOD:String = "CALL_METHOD";
        static const COMMAND_SAMPLES:String = "SAMPLES";
        static const ICON_FUNCTION:String = "iconFunction";
        static const COMMAND_INSPECT:String = "INSPECT";
        static const TYPE_OBJECT:String = "Object";
        static const TYPE_NUMBER:String = "Number";
        static const TYPE_ARRAY:String = "Array";
        static const ACCESS_VARIABLE:String = "variable";
        static const COMMAND_GET_OBJECT:String = "GET_OBJECT";
        static const DELIMITER:String = ".";

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {
    import flash.display.*;

    public class MonsterDebugger {

        static const VERSION:Number = 3.02;

        private static var _enabled:Boolean = true;
        private static var _initialized:Boolean = false;
        public static var logger:Function;

        public static function get enabled():Boolean{
            return (_enabled);
        }
        public static function trace(_arg1, _arg2, _arg3:String="", _arg4:String="", _arg5:uint=0, _arg6:int=5):void{
            if (((_initialized) && (_enabled))){
                MonsterDebuggerCore.trace(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            };
        }
        public static function log(... _args):void{
            var target:* = null;
            var stack:* = null;
            var lines:* = null;
            var s:* = null;
            var bracketIndex:* = 0;
            var methodIndex:* = 0;
            var args:* = _args;
            if (((_initialized) && (_enabled))){
                if (args.length == 0){
                    return;
                };
                target = "Log";
                try {
                    throw (new Error());
                } catch(e:Error) {
                    stack = e.getStackTrace();
                    if (((!((stack == null))) && (!((stack == ""))))){
                        stack = stack.split("\t").join("");
                        lines = stack.split("\n");
                        if (lines.length > 2){
                            lines.shift();
                            lines.shift();
                            s = lines[0];
                            s = s.substring(3, s.length);
                            bracketIndex = s.indexOf("[");
                            methodIndex = s.indexOf("/");
                            if (bracketIndex == -1){
                                bracketIndex = s.length;
                            };
                            if (methodIndex == -1){
                                methodIndex = bracketIndex;
                            };
                            target = MonsterDebuggerUtils.parseType(s.substring(0, methodIndex));
                            if (target == "<anonymous>"){
                                target = "";
                            };
                            if (target == ""){
                                target = "Log";
                            };
                        };
                    };
                };
                if (args.length == 1){
                    MonsterDebuggerCore.trace(target, args[0], "", "", 0, 5);
                } else {
                    MonsterDebuggerCore.trace(target, args, "", "", 0, 5);
                };
            };
        }
        public static function clear():void{
            if (((_initialized) && (_enabled))){
                MonsterDebuggerCore.clear();
            };
        }
        public static function set enabled(_arg1:Boolean):void{
            _enabled = _arg1;
        }
        public static function snapshot(_arg1, _arg2:DisplayObject, _arg3:String="", _arg4:String=""):void{
            if (((_initialized) && (_enabled))){
                MonsterDebuggerCore.snapshot(_arg1, _arg2, _arg3, _arg4);
            };
        }
        public static function inspect(_arg1):void{
            if (((_initialized) && (_enabled))){
                MonsterDebuggerCore.inspect(_arg1);
            };
        }
        public static function breakpoint(_arg1, _arg2:String="breakpoint"):void{
            if (((_initialized) && (_enabled))){
                MonsterDebuggerCore.breakpoint(_arg1, _arg2);
            };
        }
        public static function initialize(_arg1:Object, _arg2:String="127.0.0.1"):void{
            if (!_initialized){
                _initialized = true;
                MonsterDebuggerCore.base = _arg1;
                MonsterDebuggerCore.initialize();
                MonsterDebuggerConnection.initialize();
                MonsterDebuggerConnection.address = _arg2;
                MonsterDebuggerConnection.connect();
            };
        }

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {
    import flash.utils.*;

    public class MonsterDebuggerData {

        private var _data:Object;
        private var _id:String;

        public function MonsterDebuggerData(_arg1:String, _arg2:Object){
            _id = _arg1;
            _data = _arg2;
        }
        public static function read(_arg1:ByteArray):MonsterDebuggerData{
            var _local2:MonsterDebuggerData = new MonsterDebuggerData(null, null);
            _local2.bytes = _arg1;
            return (_local2);
        }

        public function get data():Object{
            return (_data);
        }
        public function set bytes(_arg1:ByteArray):void{
            var value:* = _arg1;
            var bytesId:* = new ByteArray();
            var bytesData:* = new ByteArray();
            try {
                value.readBytes(bytesId, 0, value.readUnsignedInt());
                value.readBytes(bytesData, 0, value.readUnsignedInt());
                _id = (bytesId.readObject() as String);
                _data = (bytesData.readObject() as Object);
            } catch(e:Error) {
                _id = null;
                _data = null;
            };
            bytesId = null;
            bytesData = null;
        }
        public function get id():String{
            return (_id);
        }
        public function get bytes():ByteArray{
            var _local1:ByteArray = new ByteArray();
            var _local2:ByteArray = new ByteArray();
            _local1.writeObject(_id);
            _local2.writeObject(_data);
            var _local3:ByteArray = new ByteArray();
            _local3.writeUnsignedInt(_local1.length);
            _local3.writeBytes(_local1);
            _local3.writeUnsignedInt(_local2.length);
            _local3.writeBytes(_local2);
            _local3.position = 0;
            _local1 = null;
            _local2 = null;
            return (_local3);
        }

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {
    import flash.display.*;
    import flash.geom.*;
    import com.demonsters.debugger.*;
    import flash.utils.*;
    import flash.system.*;

    class MonsterDebuggerUtils {

        private static var _references:Dictionary = new Dictionary(true);
        private static var _reference:int = 0;

        public static function snapshot(_arg1:DisplayObject, _arg2:Rectangle=null):BitmapData{
            var bitmapData:* = null;
            var m:* = null;
            var scaled:* = null;
            var s:* = NaN;
            var b:* = null;
            var object:* = _arg1;
            var rectangle = _arg2;
            if (object == null){
                return (null);
            };
            var visible:* = object.visible;
            var alpha:* = object.alpha;
            var rotation:* = object.rotation;
            var scaleX:* = object.scaleX;
            var scaleY:* = object.scaleY;
            try {
                object.visible = true;
                object.alpha = 1;
                object.rotation = 0;
                object.scaleX = 1;
                object.scaleY = 1;
            } catch(e1:Error) {
            };
            var bounds:* = object.getBounds(object);
            bounds.x = int((bounds.x + 0.5));
            bounds.y = int((bounds.y + 0.5));
            bounds.width = int((bounds.width + 0.5));
            bounds.height = int((bounds.height + 0.5));
            if ((object is Stage)){
                bounds.x = 0;
                bounds.y = 0;
                bounds.width = Stage(object).stageWidth;
                bounds.height = Stage(object).stageHeight;
            };
            bitmapData = null;
            if ((((bounds.width <= 0)) || ((bounds.height <= 0)))){
                return (null);
            };
            try {
                bitmapData = new BitmapData(bounds.width, bounds.height, false, 0xFFFFFF);
                m = new Matrix();
                m.tx = -(bounds.x);
                m.ty = -(bounds.y);
                bitmapData.draw(object, m, null, null, null, false);
            } catch(e2:Error) {
                bitmapData = null;
            };
            try {
                object.visible = visible;
                object.alpha = alpha;
                object.rotation = rotation;
                object.scaleX = scaleX;
                object.scaleY = scaleY;
            } catch(e3:Error) {
            };
            if (bitmapData == null){
                return (null);
            };
            if (rectangle != null){
                if ((((bounds.width <= rectangle.width)) && ((bounds.height <= rectangle.height)))){
                    return (bitmapData);
                };
                scaled = bounds.clone();
                scaled.width = rectangle.width;
                scaled.height = (rectangle.width * (bounds.height / bounds.width));
                if (scaled.height > rectangle.height){
                    scaled = bounds.clone();
                    scaled.width = (rectangle.height * (bounds.width / bounds.height));
                    scaled.height = rectangle.height;
                };
                s = (scaled.width / bounds.width);
                try {
                    b = new BitmapData(scaled.width, scaled.height, false, 0);
                    m = new Matrix();
                    m.scale(s, s);
                    b.draw(bitmapData, m, null, null, null, true);
                    bitmapData.dispose();
                    bitmapData = b;
                } catch(e4:Error) {
                    bitmapData.dispose();
                    bitmapData = null;
                };
            };
            return (bitmapData);
        }
        private static function parseClass(_arg1, _arg2:String, _arg3:XML, _arg4:int=1, _arg5:int=5, _arg6:Boolean=true):XML{
            var key:* = null;
            var itemsArrayLength:* = 0;
            var item:* = undefined;
            var itemXML:* = null;
            var itemAccess:* = null;
            var itemPermission:* = null;
            var itemIcon:* = null;
            var itemType:* = null;
            var itemName:* = null;
            var itemTarget:* = null;
            var i:* = 0;
            var prop:* = undefined;
            var displayObject:* = null;
            var displayObjects:* = null;
            var child:* = null;
            var object:* = _arg1;
            var target:* = _arg2;
            var description:* = _arg3;
            var currentDepth:int = _arg4;
            var maxDepth:int = _arg5;
            var includeDisplayObjects:Boolean = _arg6;
            var rootXML:* = new XML("<root/>");
            var nodeXML:* = new XML("<node/>");
            var variables:* = description..variable;
            var accessors:* = description..accessor;
            var constants:* = description..constant;
            var isDynamic:* = description.@isDynamic;
            var variablesLength:* = variables.length();
            var accessorsLength:* = accessors.length();
            var constantsLength:* = constants.length();
            var childLength:* = 0;
            var keys:* = {};
            var itemsArray:* = [];
            if (isDynamic){
                for (prop in object) {
                    key = String(prop);
                    if (!keys.hasOwnProperty(key)){
                        keys[key] = key;
                        itemName = key;
                        itemType = parseType(getQualifiedClassName(object[key]));
                        itemTarget = ((target + ".") + key);
                        itemAccess = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        itemIcon = MonsterDebuggerConstants.ICON_VARIABLE;
                        itemsArray[itemsArray.length] = {
                            name:itemName,
                            type:itemType,
                            target:itemTarget,
                            access:itemAccess,
                            permission:itemPermission,
                            icon:itemIcon
                        };
                    };
                };
            };
            i = 0;
            while (i < variablesLength) {
                key = variables[i].@name;
                if (!keys.hasOwnProperty(key)){
                    keys[key] = key;
                    itemName = key;
                    itemType = parseType(variables[i].@type);
                    itemTarget = ((target + ".") + key);
                    itemAccess = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    itemIcon = MonsterDebuggerConstants.ICON_VARIABLE;
                    itemsArray[itemsArray.length] = {
                        name:itemName,
                        type:itemType,
                        target:itemTarget,
                        access:itemAccess,
                        permission:itemPermission,
                        icon:itemIcon
                    };
                };
                i = (i + 1);
            };
            i = 0;
            while (i < accessorsLength) {
                key = accessors[i].@name;
                if (!keys.hasOwnProperty(key)){
                    keys[key] = key;
                    itemName = key;
                    itemType = parseType(accessors[i].@type);
                    itemTarget = ((target + ".") + key);
                    itemAccess = MonsterDebuggerConstants.ACCESS_ACCESSOR;
                    itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    itemIcon = MonsterDebuggerConstants.ICON_VARIABLE;
                    if (accessors[i].@access == MonsterDebuggerConstants.PERMISSION_READONLY){
                        itemPermission = MonsterDebuggerConstants.PERMISSION_READONLY;
                        itemIcon = MonsterDebuggerConstants.ICON_VARIABLE_READONLY;
                    };
                    if (accessors[i].@access == MonsterDebuggerConstants.PERMISSION_WRITEONLY){
                        itemPermission = MonsterDebuggerConstants.PERMISSION_WRITEONLY;
                        itemIcon = MonsterDebuggerConstants.ICON_VARIABLE_WRITEONLY;
                    };
                    itemsArray[itemsArray.length] = {
                        name:itemName,
                        type:itemType,
                        target:itemTarget,
                        access:itemAccess,
                        permission:itemPermission,
                        icon:itemIcon
                    };
                };
                i = (i + 1);
            };
            i = 0;
            while (i < constantsLength) {
                key = constants[i].@name;
                if (!keys.hasOwnProperty(key)){
                    keys[key] = key;
                    itemName = key;
                    itemType = parseType(constants[i].@type);
                    itemTarget = ((target + ".") + key);
                    itemAccess = MonsterDebuggerConstants.ACCESS_CONSTANT;
                    itemPermission = MonsterDebuggerConstants.PERMISSION_READONLY;
                    itemIcon = MonsterDebuggerConstants.ICON_VARIABLE_READONLY;
                    itemsArray[itemsArray.length] = {
                        name:itemName,
                        type:itemType,
                        target:itemTarget,
                        access:itemAccess,
                        permission:itemPermission,
                        icon:itemIcon
                    };
                };
                i = (i + 1);
            };
            itemsArray.sortOn("name", Array.CASEINSENSITIVE);
            if (((includeDisplayObjects) && ((object is DisplayObjectContainer)))){
                displayObject = DisplayObjectContainer(object);
                displayObjects = [];
                childLength = displayObject.numChildren;
                i = 0;
                while (i < childLength) {
                    child = null;
                    try {
                        child = displayObject.getChildAt(i);
                    } catch(e1:Error) {
                    };
                    if (child != null){
                        itemXML = MonsterDebuggerDescribeType.get(child);
                        itemType = parseType(itemXML.@name);
                        itemName = "DisplayObject";
                        if (child.name != null){
                            itemName = (itemName + (" - " + child.name));
                        };
                        itemTarget = ((((target + ".") + "getChildAt(") + i) + ")");
                        itemAccess = MonsterDebuggerConstants.ACCESS_DISPLAY_OBJECT;
                        itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        itemIcon = (((child is DisplayObjectContainer)) ? MonsterDebuggerConstants.ICON_ROOT : MonsterDebuggerConstants.ICON_DISPLAY_OBJECT);
                        displayObjects[displayObjects.length] = {
                            name:itemName,
                            type:itemType,
                            target:itemTarget,
                            access:itemAccess,
                            permission:itemPermission,
                            icon:itemIcon,
                            index:i
                        };
                    };
                    i = (i + 1);
                };
                displayObjects.sortOn("name", Array.CASEINSENSITIVE);
                itemsArray = displayObjects.concat(itemsArray);
            };
            itemsArrayLength = itemsArray.length;
            i = 0;
            while (i < itemsArrayLength) {
                itemType = itemsArray[i].type;
                itemName = itemsArray[i].name;
                itemTarget = itemsArray[i].target;
                itemPermission = itemsArray[i].permission;
                itemAccess = itemsArray[i].access;
                itemIcon = itemsArray[i].icon;
                if (itemPermission == MonsterDebuggerConstants.PERMISSION_WRITEONLY){
                } else {
                    try {
                        if (itemAccess == MonsterDebuggerConstants.ACCESS_DISPLAY_OBJECT){
                            item = DisplayObjectContainer(object).getChildAt(itemsArray[i].index);
                        } else {
                            item = object[itemName];
                        };
                    } catch(e2:Error) {
                        item = null;
                    };
                    if ((((((((((((itemType == MonsterDebuggerConstants.TYPE_STRING)) || ((itemType == MonsterDebuggerConstants.TYPE_BOOLEAN)))) || ((itemType == MonsterDebuggerConstants.TYPE_NUMBER)))) || ((itemType == MonsterDebuggerConstants.TYPE_INT)))) || ((itemType == MonsterDebuggerConstants.TYPE_UINT)))) || ((itemType == MonsterDebuggerConstants.TYPE_FUNCTION)))){
                        nodeXML = new XML("<node/>");
                        nodeXML.@icon = itemIcon;
                        nodeXML.@label = ((((itemName + " (") + itemType) + ") = ") + printValue(item, itemType, true));
                        nodeXML.@name = itemName;
                        nodeXML.@type = itemType;
                        nodeXML.@value = printValue(item, itemType);
                        nodeXML.@target = itemTarget;
                        nodeXML.@access = itemAccess;
                        nodeXML.@permission = itemPermission;
                        rootXML.appendChild(nodeXML);
                    } else {
                        nodeXML = new XML("<node/>");
                        nodeXML.@icon = itemIcon;
                        nodeXML.@label = (((itemName + " (") + itemType) + ")");
                        nodeXML.@name = itemName;
                        nodeXML.@type = itemType;
                        nodeXML.@target = itemTarget;
                        nodeXML.@access = itemAccess;
                        nodeXML.@permission = itemPermission;
                        if (item == null){
                            nodeXML.@icon = MonsterDebuggerConstants.ICON_WARNING;
                            nodeXML.@label = (nodeXML.@label + " = null");
                        };
                        nodeXML.appendChild(parse(item, itemTarget, (currentDepth + 1), maxDepth, includeDisplayObjects).children());
                        rootXML.appendChild(nodeXML);
                    };
                };
                i = (i + 1);
            };
            return (rootXML);
        }
        private static function parseArray(_arg1, _arg2:String, _arg3:int=1, _arg4:int=5, _arg5:Boolean=true):XML{
            var _local7:XML;
            var _local13:*;
            var _local6:XML = new XML("<root/>");
            var _local8 = "";
            var _local9 = "";
            var _local10:int;
            var _local11:Array = [];
            var _local12:Boolean;
            for (_local13 in _arg1) {
                if (!(_local13 is int)){
                    _local12 = false;
                };
                _local11.push(_local13);
            };
            if (_local12){
                _local11.sort(Array.NUMERIC);
            } else {
                _local11.sort(Array.CASEINSENSITIVE);
            };
            _local10 = 0;
            while (_local10 < _local11.length) {
                _local8 = parseType(MonsterDebuggerDescribeType.get(_arg1[_local11[_local10]]).@name);
                _local9 = ((_arg2 + ".") + String(_local11[_local10]));
                if ((((((((((((_local8 == MonsterDebuggerConstants.TYPE_STRING)) || ((_local8 == MonsterDebuggerConstants.TYPE_BOOLEAN)))) || ((_local8 == MonsterDebuggerConstants.TYPE_NUMBER)))) || ((_local8 == MonsterDebuggerConstants.TYPE_INT)))) || ((_local8 == MonsterDebuggerConstants.TYPE_UINT)))) || ((_local8 == MonsterDebuggerConstants.TYPE_FUNCTION)))){
                    _local7 = new XML("<node/>");
                    _local7.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                    _local7.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    _local7.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    _local7.@label = ((((("[" + _local11[_local10]) + "] (") + _local8) + ") = ") + printValue(_arg1[_local11[_local10]], _local8, true));
                    _local7.@name = (("[" + _local11[_local10]) + "]");
                    _local7.@type = _local8;
                    _local7.@value = printValue(_arg1[_local11[_local10]], _local8);
                    _local7.@target = _local9;
                    _local6.appendChild(_local7);
                } else {
                    _local7 = new XML("<node/>");
                    _local7.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                    _local7.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    _local7.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    _local7.@label = (((("[" + _local11[_local10]) + "] (") + _local8) + ")");
                    _local7.@name = (("[" + _local11[_local10]) + "]");
                    _local7.@type = _local8;
                    _local7.@value = "";
                    _local7.@target = _local9;
                    if (_arg1[_local11[_local10]] == null){
                        _local7.@icon = MonsterDebuggerConstants.ICON_WARNING;
                        _local7.@label = (_local7.@label + " = null");
                    };
                    _local7.appendChild(parse(_arg1[_local11[_local10]], _local9, (_arg3 + 1), _arg4, _arg5).children());
                    _local6.appendChild(_local7);
                };
                _local10++;
            };
            return (_local6);
        }
        public static function parseFunctions(_arg1, _arg2:String=""):XML{
            var itemXML:* = null;
            var key:* = null;
            var returnType:* = null;
            var parameters:* = null;
            var parametersLength:* = 0;
            var args:* = null;
            var argsString:* = null;
            var methodXML:* = null;
            var parameterXML:* = null;
            var object:* = _arg1;
            var target:String = _arg2;
            var rootXML:* = new XML("<root/>");
            var description:* = MonsterDebuggerDescribeType.get(object);
            var type:* = parseType(description.@name);
            var itemType:* = "";
            var itemName:* = "";
            var itemTarget:* = "";
            var keys:* = {};
            var methods:* = description..method;
            var methodsArr:* = [];
            var methodsLength:* = methods.length();
            var optional:* = false;
            var i:* = 0;
            var n:* = 0;
            itemXML = new XML("<node/>");
            itemXML.@icon = MonsterDebuggerConstants.ICON_DEFAULT;
            itemXML.@label = (("(" + type) + ")");
            itemXML.@target = target;
            i = 0;
            while (i < methodsLength) {
                key = methods[i].@name;
                try {
                    if (!keys.hasOwnProperty(key)){
                        keys[key] = key;
                        methodsArr[methodsArr.length] = {
                            name:key,
                            xml:methods[i],
                            access:MonsterDebuggerConstants.ACCESS_METHOD
                        };
                    };
                } catch(e:Error) {
                };
                i = (i + 1);
            };
            methodsArr.sortOn("name", Array.CASEINSENSITIVE);
            methodsLength = methodsArr.length;
            i = 0;
            while (i < methodsLength) {
                itemType = MonsterDebuggerConstants.TYPE_FUNCTION;
                itemName = methodsArr[i].xml.@name;
                itemTarget = ((target + MonsterDebuggerConstants.DELIMITER) + itemName);
                returnType = parseType(methodsArr[i].xml.@returnType);
                parameters = methodsArr[i].xml..parameter;
                parametersLength = parameters.length();
                args = [];
                argsString = "";
                optional = false;
                n = 0;
                while (n < parametersLength) {
                    if ((((parameters[n].@optional == "true")) && (!(optional)))){
                        optional = true;
                        args[args.length] = "[";
                    };
                    args[args.length] = parseType(parameters[n].@type);
                    n = (n + 1);
                };
                if (optional){
                    args[args.length] = "]";
                };
                argsString = args.join(", ");
                argsString = argsString.replace("[, ", "[");
                argsString = argsString.replace(", ]", "]");
                methodXML = new XML("<node/>");
                methodXML.@icon = MonsterDebuggerConstants.ICON_FUNCTION;
                methodXML.@type = MonsterDebuggerConstants.TYPE_FUNCTION;
                methodXML.@access = MonsterDebuggerConstants.ACCESS_METHOD;
                methodXML.@label = ((((itemName + "(") + argsString) + "):") + returnType);
                methodXML.@name = itemName;
                methodXML.@target = itemTarget;
                methodXML.@args = argsString;
                methodXML.@returnType = returnType;
                n = 0;
                while (n < parametersLength) {
                    parameterXML = new XML("<node/>");
                    parameterXML.@type = parseType(parameters[n].@type);
                    parameterXML.@index = parameters[n].@index;
                    parameterXML.@optional = parameters[n].@optional;
                    methodXML.appendChild(parameterXML);
                    n = (n + 1);
                };
                itemXML.appendChild(methodXML);
                i = (i + 1);
            };
            rootXML.appendChild(itemXML);
            return (rootXML);
        }
        public static function parseXMLList(_arg1, _arg2:String="", _arg3:int=1, _arg4:int=-1):XML{
            var _local5:XML = new XML("<root/>");
            if (((!((_arg4 == -1))) && ((_arg3 > _arg4)))){
                return (_local5);
            };
            var _local6:int;
            while (_local6 < _arg1.length()) {
                _local5.appendChild(parseXML(_arg1[_local6], (((_arg2 + ".") + String(_local6)) + ".children()"), _arg3, _arg4).children());
                _local6++;
            };
            return (_local5);
        }
        public static function parseXML(_arg1, _arg2:String="", _arg3:int=1, _arg4:int=-1):XML{
            var _local6:XML;
            var _local7:XML;
            var _local9:String;
            var _local5:XML = new XML("<root/>");
            var _local8:int;
            if (((!((_arg4 == -1))) && ((_arg3 > _arg4)))){
                return (_local5);
            };
            if (_arg2.indexOf("@") != -1){
                _local6 = new XML("<node/>");
                _local6.@icon = MonsterDebuggerConstants.ICON_XMLATTRIBUTE;
                _local6.@type = MonsterDebuggerConstants.TYPE_XMLATTRIBUTE;
                _local6.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                _local6.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                _local6.@label = _arg1;
                _local6.@name = "";
                _local6.@value = _arg1;
                _local6.@target = _arg2;
                _local5.appendChild(_local6);
            } else {
                if (((("name" in _arg1)) && ((_arg1.name() == null)))){
                    _local6 = new XML("<node/>");
                    _local6.@icon = MonsterDebuggerConstants.ICON_XMLVALUE;
                    _local6.@type = MonsterDebuggerConstants.TYPE_XMLVALUE;
                    _local6.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    _local6.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    _local6.@label = ((("(" + MonsterDebuggerConstants.TYPE_XMLVALUE) + ") = ") + printValue(_arg1, MonsterDebuggerConstants.TYPE_XMLVALUE, true));
                    _local6.@name = "";
                    _local6.@value = printValue(_arg1, MonsterDebuggerConstants.TYPE_XMLVALUE);
                    _local6.@target = _arg2;
                    _local5.appendChild(_local6);
                } else {
                    if (((("hasSimpleContent" in _arg1)) && (_arg1.hasSimpleContent()))){
                        _local6 = new XML("<node/>");
                        _local6.@icon = MonsterDebuggerConstants.ICON_XMLNODE;
                        _local6.@type = MonsterDebuggerConstants.TYPE_XMLNODE;
                        _local6.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        _local6.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        _local6.@label = (((_arg1.name() + " (") + MonsterDebuggerConstants.TYPE_XMLNODE) + ")");
                        _local6.@name = _arg1.name();
                        _local6.@value = "";
                        _local6.@target = _arg2;
                        if (_arg1 != ""){
                            _local7 = new XML("<node/>");
                            _local7.@icon = MonsterDebuggerConstants.ICON_XMLVALUE;
                            _local7.@type = MonsterDebuggerConstants.TYPE_XMLVALUE;
                            _local7.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                            _local7.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                            _local7.@label = ((("(" + MonsterDebuggerConstants.TYPE_XMLVALUE) + ") = ") + printValue(_arg1, MonsterDebuggerConstants.TYPE_XMLVALUE));
                            _local7.@name = "";
                            _local7.@value = printValue(_arg1, MonsterDebuggerConstants.TYPE_XMLVALUE);
                            _local7.@target = _arg2;
                            _local6.appendChild(_local7);
                        };
                        _local8 = 0;
                        while (_local8 < _arg1.attributes().length()) {
                            _local7 = new XML("<node/>");
                            _local7.@icon = MonsterDebuggerConstants.ICON_XMLATTRIBUTE;
                            _local7.@type = MonsterDebuggerConstants.TYPE_XMLATTRIBUTE;
                            _local7.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                            _local7.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                            _local7.@label = ((((("@" + _arg1.attributes()[_local8].name()) + " (") + MonsterDebuggerConstants.TYPE_XMLATTRIBUTE) + ") = ") + _arg1.attributes()[_local8]);
                            _local7.@name = "";
                            _local7.@value = _arg1.attributes()[_local8];
                            _local7.@target = (((_arg2 + ".") + "@") + _arg1.attributes()[_local8].name());
                            _local6.appendChild(_local7);
                            _local8++;
                        };
                        _local5.appendChild(_local6);
                    } else {
                        _local6 = new XML("<node/>");
                        _local6.@icon = MonsterDebuggerConstants.ICON_XMLNODE;
                        _local6.@type = MonsterDebuggerConstants.TYPE_XMLNODE;
                        _local6.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        _local6.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        _local6.@label = (((_arg1.name() + " (") + MonsterDebuggerConstants.TYPE_XMLNODE) + ")");
                        _local6.@name = _arg1.name();
                        _local6.@value = "";
                        _local6.@target = _arg2;
                        _local8 = 0;
                        while (_local8 < _arg1.attributes().length()) {
                            _local7 = new XML("<node/>");
                            _local7.@icon = MonsterDebuggerConstants.ICON_XMLATTRIBUTE;
                            _local7.@type = MonsterDebuggerConstants.TYPE_XMLATTRIBUTE;
                            _local7.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                            _local7.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                            _local7.@label = ((((("@" + _arg1.attributes()[_local8].name()) + " (") + MonsterDebuggerConstants.TYPE_XMLATTRIBUTE) + ") = ") + _arg1.attributes()[_local8]);
                            _local7.@name = "";
                            _local7.@value = _arg1.attributes()[_local8];
                            _local7.@target = (((_arg2 + ".") + "@") + _arg1.attributes()[_local8].name());
                            _local6.appendChild(_local7);
                            _local8++;
                        };
                        _local8 = 0;
                        while (_local8 < _arg1.children().length()) {
                            _local9 = ((((_arg2 + ".") + "children()") + ".") + _local8);
                            _local6.appendChild(parseXML(_arg1.children()[_local8], _local9, (_arg3 + 1), _arg4).children());
                            _local8++;
                        };
                        _local5.appendChild(_local6);
                    };
                };
            };
            return (_local5);
        }
        public static function resume():Boolean{
            try {
                System.resume();
                return (true);
            } catch(e:Error) {
            };
            return (false);
        }
        public static function getObjectUnderPoint(_arg1:DisplayObjectContainer, _arg2:Point):DisplayObject{
            var _local3:Array;
            var _local4:DisplayObject;
            var _local6:DisplayObject;
            if (_arg1.areInaccessibleObjectsUnderPoint(_arg2)){
                return (_arg1);
            };
            _local3 = _arg1.getObjectsUnderPoint(_arg2);
            _local3.reverse();
            if ((((_local3 == null)) || ((_local3.length == 0)))){
                return (_arg1);
            };
            _local4 = _local3[0];
            _local3.length = 0;
            while (true) {
                _local3[_local3.length] = _local4;
                if (_local4.parent == null){
                    break;
                };
                _local4 = _local4.parent;
            };
            _local3.reverse();
            var _local5:int;
            while (_local5 < _local3.length) {
                _local6 = _local3[_local5];
                if ((_local6 is DisplayObjectContainer)){
                    _local4 = _local6;
                    if (!DisplayObjectContainer(_local6).mouseChildren){
                        break;
                    };
                } else {
                    break;
                };
                _local5++;
            };
            return (_local4);
        }
        public static function getReferenceID(_arg1):String{
            if ((_arg1 in _references)){
                return (_references[_arg1]);
            };
            var _local2:String = ("#" + String(_reference));
            _references[_arg1] = _local2;
            _reference++;
            return (_local2);
        }
        public static function printValue(_arg1, _arg2:String, _arg3:Boolean=false):String{
            if (_arg2 == MonsterDebuggerConstants.TYPE_BYTEARRAY){
                return ((_arg1["length"] + " bytes"));
            };
            if (_arg1 == null){
                return ("null");
            };
            var _local4:String = String(_arg1);
            if (((_arg3) && ((_local4.length > 140)))){
                _local4 = (_local4.substr(0, 140) + "...");
            };
            return (_local4);
        }
        private static function parseObject(_arg1, _arg2:String, _arg3:int=1, _arg4:int=5, _arg5:Boolean=true):XML{
            var _local8:XML;
            var _local14:*;
            var _local6:XML = new XML("<root/>");
            var _local7:XML = new XML("<node/>");
            var _local9 = "";
            var _local10 = "";
            var _local11:int;
            var _local12:Array = [];
            var _local13:Boolean;
            for (_local14 in _arg1) {
                if (!(_local14 is int)){
                    _local13 = false;
                };
                _local12.push(_local14);
            };
            if (_local13){
                _local12.sort(Array.NUMERIC);
            } else {
                _local12.sort(Array.CASEINSENSITIVE);
            };
            _local11 = 0;
            while (_local11 < _local12.length) {
                _local9 = parseType(MonsterDebuggerDescribeType.get(_arg1[_local12[_local11]]).@name);
                _local10 = ((_arg2 + ".") + _local12[_local11]);
                if ((((((((((((_local9 == MonsterDebuggerConstants.TYPE_STRING)) || ((_local9 == MonsterDebuggerConstants.TYPE_BOOLEAN)))) || ((_local9 == MonsterDebuggerConstants.TYPE_NUMBER)))) || ((_local9 == MonsterDebuggerConstants.TYPE_INT)))) || ((_local9 == MonsterDebuggerConstants.TYPE_UINT)))) || ((_local9 == MonsterDebuggerConstants.TYPE_FUNCTION)))){
                    _local8 = new XML("<node/>");
                    _local8.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                    _local8.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    _local8.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    _local8.@label = ((((_local12[_local11] + " (") + _local9) + ") = ") + printValue(_arg1[_local12[_local11]], _local9, true));
                    _local8.@name = _local12[_local11];
                    _local8.@type = _local9;
                    _local8.@value = printValue(_arg1[_local12[_local11]], _local9);
                    _local8.@target = _local10;
                    _local7.appendChild(_local8);
                } else {
                    _local8 = new XML("<node/>");
                    _local8.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                    _local8.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    _local8.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    _local8.@label = (((_local12[_local11] + " (") + _local9) + ")");
                    _local8.@name = _local12[_local11];
                    _local8.@type = _local9;
                    _local8.@value = "";
                    _local8.@target = _local10;
                    if (_arg1[_local12[_local11]] == null){
                        _local8.@icon = MonsterDebuggerConstants.ICON_WARNING;
                        _local8.@label = (_local8.@label + " = null");
                    };
                    _local8.appendChild(parse(_arg1[_local12[_local11]], _local10, (_arg3 + 1), _arg4, _arg5).children());
                    _local7.appendChild(_local8);
                };
                _local11++;
            };
            _local6.appendChild(_local7.children());
            return (_local6);
        }
        public static function parse(_arg1, _arg2:String="", _arg3:int=1, _arg4:int=5, _arg5:Boolean=true):XML{
            var _local14:XML;
            var _local6:XML = new XML("<root/>");
            var _local7:XML = new XML("<node/>");
            var _local8:XML = new XML();
            var _local9 = "";
            var _local10 = "";
            var _local11:Boolean;
            var _local12:String;
            var _local13:String = MonsterDebuggerConstants.ICON_ROOT;
            if (((!((_arg4 == -1))) && ((_arg3 > _arg4)))){
                return (_local6);
            };
            if (_arg1 == null){
                _local9 = "null";
                _local12 = "null";
                _local13 = MonsterDebuggerConstants.ICON_WARNING;
            } else {
                _local8 = MonsterDebuggerDescribeType.get(_arg1);
                _local9 = parseType(_local8.@name);
                _local10 = parseType(_local8.@base);
                _local11 = _local8.@isDynamic;
                if ((_arg1 is Class)){
                    _local12 = ("Class = " + _local9);
                    _local9 = "Class";
                    _local7.appendChild(parseClass(_arg1, _arg2, _local8, _arg3, _arg4, _arg5).children());
                } else {
                    if (_local9 == MonsterDebuggerConstants.TYPE_XML){
                        _local7.appendChild(parseXML(_arg1, (_arg2 + ".children()"), _arg3, _arg4).children());
                    } else {
                        if (_local9 == MonsterDebuggerConstants.TYPE_XMLLIST){
                            _local12 = (((_local9 + " [") + String(_arg1.length())) + "]");
                            _local7.appendChild(parseXMLList(_arg1, _arg2, _arg3, _arg4).children());
                        } else {
                            if ((((_local9 == MonsterDebuggerConstants.TYPE_ARRAY)) || ((_local9.indexOf(MonsterDebuggerConstants.TYPE_VECTOR) == 0)))){
                                _local12 = (((_local9 + " [") + String(_arg1["length"])) + "]");
                                _local7.appendChild(parseArray(_arg1, _arg2, _arg3, _arg4).children());
                            } else {
                                if ((((((((((_local9 == MonsterDebuggerConstants.TYPE_STRING)) || ((_local9 == MonsterDebuggerConstants.TYPE_BOOLEAN)))) || ((_local9 == MonsterDebuggerConstants.TYPE_NUMBER)))) || ((_local9 == MonsterDebuggerConstants.TYPE_INT)))) || ((_local9 == MonsterDebuggerConstants.TYPE_UINT)))){
                                    _local7.appendChild(parseBasics(_arg1, _arg2, _local9).children());
                                } else {
                                    if (_local9 == MonsterDebuggerConstants.TYPE_OBJECT){
                                        _local7.appendChild(parseObject(_arg1, _arg2, _arg3, _arg4, _arg5).children());
                                    } else {
                                        _local7.appendChild(parseClass(_arg1, _arg2, _local8, _arg3, _arg4, _arg5).children());
                                    };
                                };
                            };
                        };
                    };
                };
            };
            if (_arg3 == 1){
                _local14 = new XML("<node/>");
                _local14.@icon = _local13;
                _local14.@label = _local9;
                _local14.@type = _local9;
                _local14.@target = _arg2;
                if (_local12 != null){
                    _local14.@label = _local12;
                };
                _local14.appendChild(_local7.children());
                _local6.appendChild(_local14);
            } else {
                _local6.appendChild(_local7.children());
            };
            return (_local6);
        }
        public static function parseType(_arg1:String):String{
            var _local2:String;
            var _local3:String;
            if (_arg1.indexOf("::") != -1){
                _arg1 = _arg1.substring((_arg1.indexOf("::") + 2), _arg1.length);
            };
            if (_arg1.indexOf("::") != -1){
                _local2 = _arg1.substring(0, (_arg1.indexOf("<") + 1));
                _local3 = _arg1.substring((_arg1.indexOf("::") + 2), _arg1.length);
                _arg1 = (_local2 + _local3);
            };
            _arg1 = _arg1.replace("()", "");
            _arg1 = _arg1.replace(MonsterDebuggerConstants.TYPE_METHOD, MonsterDebuggerConstants.TYPE_FUNCTION);
            return (_arg1);
        }
        public static function getReference(_arg1:String){
            var _local2:*;
            var _local3:String;
            if (_arg1.charAt(0) != "#"){
                return (null);
            };
            for (_local2 in _references) {
                _local3 = _references[_local2];
                if (_local3 == _arg1){
                    return (_local2);
                };
            };
            return (null);
        }
        public static function pause():Boolean{
            try {
                System.pause();
                return (true);
            } catch(e:Error) {
            };
            return (false);
        }
        public static function getMemory():uint{
            return (System.totalMemory);
        }
        public static function getObject(_arg1, _arg2:String="", _arg3:int=0){
            var index:* = NaN;
            var base:* = _arg1;
            var target:String = _arg2;
            var parent:int = _arg3;
            if ((((target == null)) || ((target == "")))){
                return (base);
            };
            if (target.charAt(0) == "#"){
                return (getReference(target));
            };
            var object:* = base;
            var splitted:* = target.split(MonsterDebuggerConstants.DELIMITER);
            var i:* = 0;
            while (i < (splitted.length - parent)) {
                if (splitted[i] != ""){
                    try {
                        if (splitted[i] == "children()"){
                            object = object.children();
                        } else {
                            if ((((object is DisplayObjectContainer)) && ((splitted[i].indexOf("getChildAt(") == 0)))){
                                index = splitted[i].substring(11, splitted[i].indexOf(")", 11));
                                object = DisplayObjectContainer(object).getChildAt(index);
                            } else {
                                object = object[splitted[i]];
                            };
                        };
                    } catch(e:Error) {
                        break;
                    };
                };
                i = (i + 1);
            };
            return (object);
        }
        public static function stackTrace():XML{
            var childXML:* = null;
            var stack:* = null;
            var lines:* = null;
            var i:* = 0;
            var s:* = null;
            var bracketIndex:* = 0;
            var methodIndex:* = 0;
            var classname:* = null;
            var method:* = null;
            var file:* = null;
            var line:* = null;
            var functionXML:* = null;
            var rootXML:* = new XML("<root/>");
            childXML = new XML("<node/>");
            try {
                throw (new Error());
            } catch(e:Error) {
                stack = e.getStackTrace();
                if ((((stack == null)) || ((stack == "")))){
                    return (new XML("<root><error>Stack unavailable</error></root>"));
                };
                stack = stack.split("\t").join("");
                lines = stack.split("\n");
                if (lines.length <= 4){
                    return (new XML("<root><error>Stack to short</error></root>"));
                };
                lines.shift();
                lines.shift();
                lines.shift();
                lines.shift();
                i = 0;
                while (i < lines.length) {
                    s = lines[i];
                    s = s.substring(3, s.length);
                    bracketIndex = s.indexOf("[");
                    methodIndex = s.indexOf("/");
                    if (bracketIndex == -1){
                        bracketIndex = s.length;
                    };
                    if (methodIndex == -1){
                        methodIndex = bracketIndex;
                    };
                    classname = MonsterDebuggerUtils.parseType(s.substring(0, methodIndex));
                    method = "";
                    file = "";
                    line = "";
                    if (((!((methodIndex == s.length))) && (!((methodIndex == bracketIndex))))){
                        method = s.substring((methodIndex + 1), bracketIndex);
                    };
                    if (bracketIndex != s.length){
                        file = s.substring((bracketIndex + 1), s.lastIndexOf(":"));
                        line = s.substring((s.lastIndexOf(":") + 1), (s.length - 1));
                    };
                    functionXML = new XML("<node/>");
                    functionXML.@classname = classname;
                    functionXML.@method = method;
                    functionXML.@file = file;
                    functionXML.@line = line;
                    childXML.appendChild(functionXML);
                    i = (i + 1);
                };
            };
            rootXML.appendChild(childXML.children());
            return (rootXML);
        }
        public static function isDisplayObject(_arg1):Boolean{
            return ((((_arg1 is DisplayObject)) || ((_arg1 is DisplayObjectContainer))));
        }
        private static function parseBasics(_arg1, _arg2:String, _arg3:String):XML{
            var _local4:XML = new XML("<root/>");
            var _local5:XML = new XML("<node/>");
            _local5.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
            _local5.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
            _local5.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
            _local5.@label = ((_arg3 + " = ") + printValue(_arg1, _arg3, true));
            _local5.@name = "";
            _local5.@type = _arg3;
            _local5.@value = printValue(_arg1, _arg3);
            _local5.@target = _arg2;
            _local4.appendChild(_local5);
            return (_local4);
        }

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {
    import com.demonsters.debugger.*;
    import flash.utils.*;

    class MonsterDebuggerDescribeType {

        private static var cache:Object = {};

        static function get(_arg1):XML{
            var _local2:String = getQualifiedClassName(_arg1);
            if ((_local2 in cache)){
                return (cache[_local2]);
            };
            var _local3:XML = describeType(_arg1);
            cache[_local2] = _local3;
            return (_local3);
        }

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {
    import com.demonsters.debugger.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import flash.system.*;

    class MonsterDebuggerConnectionDefault implements IMonsterDebuggerConnection {

        private const MAX_QUEUE_LENGTH:int = 500;

        private var _length:uint;
        private var _package:ByteArray;
        private var _queue:Array;
        private var _connecting:Boolean;
        private var _socket:Socket;
        private var _timeout:Timer;
        private var _port:int;
        private var _retry:Timer;
        private var _bytes:ByteArray;
        private var _process:Boolean;
        private var _address:String;

        public function MonsterDebuggerConnectionDefault(){
            _queue = [];
            super();
            _socket = new Socket();
            _socket.addEventListener(Event.CONNECT, connectHandler, false, 0, false);
            _socket.addEventListener(Event.CLOSE, closeHandler, false, 0, false);
            _socket.addEventListener(IOErrorEvent.IO_ERROR, closeHandler, false, 0, false);
            _socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, closeHandler, false, 0, false);
            _socket.addEventListener(ProgressEvent.SOCKET_DATA, dataHandler, false, 0, false);
            _connecting = false;
            _process = false;
            _address = "127.0.0.1";
            _port = 5840;
            _timeout = new Timer(2000, 1);
            _timeout.addEventListener(TimerEvent.TIMER, closeHandler, false, 0, false);
            _retry = new Timer(1000, 1);
            _retry.addEventListener(TimerEvent.TIMER, retryHandler, false, 0, false);
        }
        private function dataHandler(_arg1:ProgressEvent):void{
            _bytes = new ByteArray();
            _socket.readBytes(_bytes, 0, _socket.bytesAvailable);
            _bytes.position = 0;
            processPackage();
        }
        public function send(_arg1:String, _arg2:Object, _arg3:Boolean=false):void{
            var _local4:ByteArray;
            if (((((_arg3) && ((_arg1 == MonsterDebuggerCore.ID)))) && (_socket.connected))){
                _local4 = new MonsterDebuggerData(_arg1, _arg2).bytes;
                _socket.writeUnsignedInt(_local4.length);
                _socket.writeBytes(_local4);
                _socket.flush();
                return;
            };
            _queue.push(new MonsterDebuggerData(_arg1, _arg2));
            if (_queue.length > MAX_QUEUE_LENGTH){
                _queue.shift();
            };
            if (_queue.length > 0){
                next();
            };
        }
        public function get connected():Boolean{
            if (_socket == null){
                return (false);
            };
            return (_socket.connected);
        }
        private function next():void{
            if (!MonsterDebugger.enabled){
                return;
            };
            if (!_process){
                return;
            };
            if (!_socket.connected){
                connect();
                return;
            };
            var _local1:ByteArray = MonsterDebuggerData(_queue.shift()).bytes;
            _socket.writeUnsignedInt(_local1.length);
            _socket.writeBytes(_local1);
            _socket.flush();
            _local1 = null;
            if (_queue.length > 0){
                next();
            };
        }
        private function retryHandler(_arg1:TimerEvent):void{
            _retry.stop();
            connect();
        }
        private function processPackage():void{
            var _local1:uint;
            var _local2:MonsterDebuggerData;
            if (_bytes.bytesAvailable == 0){
                return;
            };
            if (_length == 0){
                _length = _bytes.readUnsignedInt();
                _package = new ByteArray();
            };
            if ((((_package.length < _length)) && ((_bytes.bytesAvailable > 0)))){
                _local1 = _bytes.bytesAvailable;
                if (_local1 > (_length - _package.length)){
                    _local1 = (_length - _package.length);
                };
                _bytes.readBytes(_package, _package.length, _local1);
            };
            if (((!((_length == 0))) && ((_package.length == _length)))){
                _local2 = MonsterDebuggerData.read(_package);
                if (_local2.id != null){
                    MonsterDebuggerCore.handle(_local2);
                };
                _length = 0;
                _package = null;
            };
            if ((((_length == 0)) && ((_bytes.bytesAvailable > 0)))){
                processPackage();
            };
        }
        public function set address(_arg1:String):void{
            _address = _arg1;
        }
        private function connectHandler(_arg1:Event):void{
            _timeout.stop();
            _retry.stop();
            _connecting = false;
            _bytes = new ByteArray();
            _package = new ByteArray();
            _length = 0;
            _socket.writeUTFBytes(("<hello/>" + "\n"));
            _socket.writeByte(0);
            _socket.flush();
        }
        public function processQueue():void{
            if (!_process){
                _process = true;
                if (_queue.length > 0){
                    next();
                };
            };
        }
        private function closeHandler(_arg1:Event=null):void{
            MonsterDebuggerUtils.resume();
            if (!_retry.running){
                _connecting = false;
                _process = false;
                _timeout.stop();
                _retry.reset();
                _retry.start();
            };
        }
        public function connect():void{
            if (((!(_connecting)) && (MonsterDebugger.enabled))){
                try {
                    Security.loadPolicyFile(((("xmlsocket://" + _address) + ":") + _port));
                    _connecting = true;
                    _socket.connect(_address, _port);
                    _retry.stop();
                    _timeout.reset();
                    _timeout.start();
                } catch(e:Error) {
                    closeHandler();
                };
            };
        }

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {

    interface IMonsterDebuggerConnection {

        function processQueue():void;
        function set address(_arg1:String):void;
        function get connected():Boolean;
        function connect():void;
        function send(_arg1:String, _arg2:Object, _arg3:Boolean=false):void;

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {
    import flash.display.*;
    import flash.geom.*;
    import com.demonsters.debugger.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.text.*;
    import flash.system.*;
    import flash.external.*;

    class MonsterDebuggerCore {

        private static const HIGHLITE_COLOR:uint = 3381759;
        private static const MONITOR_UPDATE:int = 1000;
        static const ID:String = "com.demonsters.debugger.core";

        private static var _monitorSprite:Sprite;
        private static var _highlightInfo:TextField;
        private static var _monitorStart:Number;
        private static var _monitorTime:Number;
        private static var _highlightUpdate:Boolean;
        private static var _monitorFrames:int;
        private static var _highlightTarget:DisplayObject;
        private static var _monitorTimer:Timer;
        private static var _base:Object = null;
        private static var _highlight:Sprite;
        private static var _highlightMouse:Boolean;
        private static var _stage:Stage = null;

        private static function send(_arg1:Object, _arg2:Boolean=false):void{
            if (MonsterDebugger.enabled){
                MonsterDebuggerConnection.send(MonsterDebuggerCore.ID, _arg1, _arg2);
            };
        }
        static function snapshot(_arg1, _arg2:DisplayObject, _arg3:String="", _arg4:String=""):void{
            var _local5:BitmapData;
            var _local6:ByteArray;
            var _local7:Object;
            if (MonsterDebugger.enabled){
                _local5 = MonsterDebuggerUtils.snapshot(_arg2);
                if (_local5 != null){
                    _local6 = _local5.getPixels(new Rectangle(0, 0, _local5.width, _local5.height));
                    _local7 = {
                        command:MonsterDebuggerConstants.COMMAND_SNAPSHOT,
                        memory:MonsterDebuggerUtils.getMemory(),
                        date:new Date(),
                        target:String(_arg1),
                        reference:MonsterDebuggerUtils.getReferenceID(_arg1),
                        bytes:_local6,
                        width:_local5.width,
                        height:_local5.height,
                        person:_arg3,
                        label:_arg4
                    };
                    send(_local7);
                };
            };
        }
        static function trace(_arg1, _arg2, _arg3:String="", _arg4:String="", _arg5:uint=0, _arg6:int=5):void{
            var _local7:XML;
            var _local8:Object;
            if (MonsterDebugger.enabled){
                _local7 = XML(MonsterDebuggerUtils.parse(_arg2, "", 1, _arg6, false));
                _local8 = {
                    command:MonsterDebuggerConstants.COMMAND_TRACE,
                    memory:MonsterDebuggerUtils.getMemory(),
                    date:new Date(),
                    target:String(_arg1),
                    reference:MonsterDebuggerUtils.getReferenceID(_arg1),
                    xml:_local7,
                    person:_arg3,
                    label:_arg4,
                    color:_arg5
                };
                send(_local8);
            };
        }
        static function sendInformation():void{
            var UIComponentClass:* = undefined;
            var tmpLocation:* = null;
            var tmpTitle:* = null;
            var NativeApplicationClass:* = undefined;
            var descriptor:* = null;
            var ns:* = null;
            var filename:* = null;
            var FileClass:* = undefined;
            var slash:* = 0;
            var playerType:* = Capabilities.playerType;
            var playerVersion:* = Capabilities.version;
            var isDebugger:* = Capabilities.isDebugger;
            var isFlex:* = false;
            var fileTitle:* = "";
            var fileLocation:* = "";
            try {
                UIComponentClass = getDefinitionByName("mx.core::UIComponent");
                if (UIComponentClass != null){
                    isFlex = true;
                };
            } catch(e1:Error) {
            };
            if ((((_base is DisplayObject)) && (_base.hasOwnProperty("loaderInfo")))){
                if (DisplayObject(_base).loaderInfo != null){
                    fileLocation = unescape(DisplayObject(_base).loaderInfo.url);
                };
            };
            if (_base.hasOwnProperty("stage")){
                if (((!((_base["stage"] == null))) && ((_base["stage"] is Stage)))){
                    fileLocation = unescape(Stage(_base["stage"]).loaderInfo.url);
                };
            };
            if ((((playerType == "ActiveX")) || ((playerType == "PlugIn")))){
                if (ExternalInterface.available){
                    try {
                        tmpLocation = ExternalInterface.call("window.location.href.toString");
                        tmpTitle = ExternalInterface.call("window.document.title.toString");
                        if (tmpLocation != null){
                            fileLocation = tmpLocation;
                        };
                        if (tmpTitle != null){
                            fileTitle = tmpTitle;
                        };
                    } catch(e2:Error) {
                    };
                };
            };
            if (playerType == "Desktop"){
                try {
                    NativeApplicationClass = getDefinitionByName("flash.desktop::NativeApplication");
                    if (NativeApplicationClass != null){
                        descriptor = NativeApplicationClass["nativeApplication"]["applicationDescriptor"];
                        ns = descriptor.namespace();
                        filename = descriptor.ns::filename;
                        FileClass = getDefinitionByName("flash.filesystem::File");
                        if (Capabilities.os.toLowerCase().indexOf("windows") != -1){
                            filename = (filename + ".exe");
                            fileLocation = FileClass["applicationDirectory"]["resolvePath"](filename)["nativePath"];
                        } else {
                            if (Capabilities.os.toLowerCase().indexOf("mac") != -1){
                                filename = (filename + ".app");
                                fileLocation = FileClass["applicationDirectory"]["resolvePath"](filename)["nativePath"];
                            };
                        };
                    };
                } catch(e3:Error) {
                };
            };
            if ((((fileTitle == "")) && (!((fileLocation == ""))))){
                slash = Math.max(fileLocation.lastIndexOf("\\"), fileLocation.lastIndexOf("/"));
                if (slash != -1){
                    fileTitle = fileLocation.substring((slash + 1), fileLocation.lastIndexOf("."));
                } else {
                    fileTitle = fileLocation;
                };
            };
            if (fileTitle == ""){
                fileTitle = "Application";
            };
            var data:* = {
                command:MonsterDebuggerConstants.COMMAND_INFO,
                debuggerVersion:MonsterDebugger.VERSION,
                playerType:playerType,
                playerVersion:playerVersion,
                isDebugger:isDebugger,
                isFlex:isFlex,
                fileLocation:fileLocation,
                fileTitle:fileTitle
            };
            send(data, true);
            MonsterDebuggerConnection.processQueue();
        }
        static function clear():void{
            if (MonsterDebugger.enabled){
                send({command:MonsterDebuggerConstants.COMMAND_CLEAR_TRACES});
            };
        }
        static function get base(){
            return (_base);
        }
        private static function monitorTimerCallback(_arg1:TimerEvent):void{
            var _local2:Number;
            var _local3:Number;
            var _local4:uint;
            var _local5:uint;
            var _local6:Object;
            if (MonsterDebugger.enabled){
                _local2 = new Date().time;
                _local3 = (_local2 - _monitorTime);
                _local4 = ((_monitorFrames / _local3) * 1000);
                _local5 = 0;
                if (_stage == null){
                    if (((((_base.hasOwnProperty("stage")) && (!((_base["stage"] == null))))) && ((_base["stage"] is Stage)))){
                        _stage = Stage(_base["stage"]);
                    };
                };
                if (_stage != null){
                    _local5 = _stage.frameRate;
                };
                _monitorFrames = 0;
                _monitorTime = _local2;
                if (MonsterDebuggerConnection.connected){
                    _local6 = {
                        command:MonsterDebuggerConstants.COMMAND_MONITOR,
                        memory:MonsterDebuggerUtils.getMemory(),
                        fps:_local4,
                        fpsMovie:_local5,
                        time:_local2
                    };
                    send(_local6);
                };
            };
        }
        private static function highlightClicked(_arg1:MouseEvent):void{
            _arg1.preventDefault();
            _arg1.stopImmediatePropagation();
            highlightClear();
            _highlightTarget = MonsterDebuggerUtils.getObjectUnderPoint(_stage, new Point(_stage.mouseX, _stage.mouseY));
            _highlightMouse = false;
            _highlight.removeEventListener(MouseEvent.CLICK, highlightClicked);
            _highlight.mouseEnabled = false;
            if (_highlightTarget != null){
                inspect(_highlightTarget);
                highlightDraw(false);
            };
            send({command:MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT});
        }
        static function initialize():void{
            _monitorTime = new Date().time;
            _monitorStart = new Date().time;
            _monitorFrames = 0;
            _monitorTimer = new Timer(MONITOR_UPDATE);
            _monitorTimer.addEventListener(TimerEvent.TIMER, monitorTimerCallback, false, 0, true);
            _monitorTimer.start();
            if (((((_base.hasOwnProperty("stage")) && (!((_base["stage"] == null))))) && ((_base["stage"] is Stage)))){
                _stage = (_base["stage"] as Stage);
            };
            _monitorSprite = new Sprite();
            _monitorSprite.addEventListener(Event.ENTER_FRAME, frameHandler, false, 0, true);
            var _local1:TextFormat = new TextFormat();
            _local1.font = "Arial";
            _local1.color = 0xFFFFFF;
            _local1.size = 11;
            _local1.leftMargin = 5;
            _local1.rightMargin = 5;
            _highlightInfo = new TextField();
            _highlightInfo.embedFonts = false;
            _highlightInfo.autoSize = TextFieldAutoSize.LEFT;
            _highlightInfo.mouseWheelEnabled = false;
            _highlightInfo.mouseEnabled = false;
            _highlightInfo.condenseWhite = false;
            _highlightInfo.embedFonts = false;
            _highlightInfo.multiline = false;
            _highlightInfo.selectable = false;
            _highlightInfo.wordWrap = false;
            _highlightInfo.defaultTextFormat = _local1;
            _highlightInfo.text = "";
            _highlight = new Sprite();
            _highlightMouse = false;
            _highlightTarget = null;
            _highlightUpdate = false;
        }
        private static function highlightDraw(_arg1:Boolean):void{
            var fill:* = _arg1;
            if (_highlightTarget == null){
                return;
            };
            var boundsOuter:* = _highlightTarget.getBounds(_stage);
            if ((_highlightTarget is Stage)){
                boundsOuter.x = 0;
                boundsOuter.y = 0;
                boundsOuter.width = _highlightTarget["stageWidth"];
                boundsOuter.height = _highlightTarget["stageHeight"];
            } else {
                boundsOuter.x = int((boundsOuter.x + 0.5));
                boundsOuter.y = int((boundsOuter.y + 0.5));
                boundsOuter.width = int((boundsOuter.width + 0.5));
                boundsOuter.height = int((boundsOuter.height + 0.5));
            };
            var boundsInner:* = boundsOuter.clone();
            boundsInner.x = (boundsInner.x + 2);
            boundsInner.y = (boundsInner.y + 2);
            boundsInner.width = (boundsInner.width - 4);
            boundsInner.height = (boundsInner.height - 4);
            if (boundsInner.width < 0){
                boundsInner.width = 0;
            };
            if (boundsInner.height < 0){
                boundsInner.height = 0;
            };
            _highlight.graphics.clear();
            _highlight.graphics.beginFill(HIGHLITE_COLOR, 1);
            _highlight.graphics.drawRect(boundsOuter.x, boundsOuter.y, boundsOuter.width, boundsOuter.height);
            _highlight.graphics.drawRect(boundsInner.x, boundsInner.y, boundsInner.width, boundsInner.height);
            if (fill){
                _highlight.graphics.beginFill(HIGHLITE_COLOR, 0.25);
                _highlight.graphics.drawRect(boundsInner.x, boundsInner.y, boundsInner.width, boundsInner.height);
            };
            if (_highlightTarget.name != null){
                _highlightInfo.text = ((String(_highlightTarget.name) + " - ") + String(MonsterDebuggerDescribeType.get(_highlightTarget).@name));
            } else {
                _highlightInfo.text = String(MonsterDebuggerDescribeType.get(_highlightTarget).@name);
            };
            var boundsText:* = new Rectangle(boundsOuter.x, (boundsOuter.y - (_highlightInfo.textHeight + 3)), (_highlightInfo.textWidth + 15), (_highlightInfo.textHeight + 5));
            if (boundsText.y < 0){
                boundsText.y = (boundsOuter.y + boundsOuter.height);
            };
            if ((boundsText.y + boundsText.height) > _stage.stageHeight){
                boundsText.y = (_stage.stageHeight - boundsText.height);
            };
            if (boundsText.x < 0){
                boundsText.x = 0;
            };
            if ((boundsText.x + boundsText.width) > _stage.stageWidth){
                boundsText.x = (_stage.stageWidth - boundsText.width);
            };
            _highlight.graphics.beginFill(HIGHLITE_COLOR, 1);
            _highlight.graphics.drawRect(boundsText.x, boundsText.y, boundsText.width, boundsText.height);
            _highlight.graphics.endFill();
            _highlightInfo.x = boundsText.x;
            _highlightInfo.y = boundsText.y;
            try {
                _stage.addChild(_highlight);
                _stage.addChild(_highlightInfo);
            } catch(e:Error) {
            };
        }
        private static function handleInternal(_arg1:MonsterDebuggerData):void{
            var obj:* = undefined;
            var xml:* = null;
            var method:* = null;
            var displayObject:* = null;
            var bitmapData:* = null;
            var bytes:* = null;
            var item:* = _arg1;
            switch (item.data["command"]){
                case MonsterDebuggerConstants.COMMAND_HELLO:
                    sendInformation();
                    break;
                case MonsterDebuggerConstants.COMMAND_BASE:
                    obj = MonsterDebuggerUtils.getObject(_base, "", 0);
                    if (obj != null){
                        xml = XML(MonsterDebuggerUtils.parse(obj, "", 1, 2, true));
                        send({
                            command:MonsterDebuggerConstants.COMMAND_BASE,
                            xml:xml
                        });
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_INSPECT:
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null){
                        _base = obj;
                        xml = XML(MonsterDebuggerUtils.parse(obj, "", 1, 2, true));
                        send({
                            command:MonsterDebuggerConstants.COMMAND_BASE,
                            xml:xml
                        });
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_GET_OBJECT:
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null){
                        xml = XML(MonsterDebuggerUtils.parse(obj, item.data["target"], 1, 2, true));
                        send({
                            command:MonsterDebuggerConstants.COMMAND_GET_OBJECT,
                            xml:xml
                        });
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_GET_PROPERTIES:
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null){
                        xml = XML(MonsterDebuggerUtils.parse(obj, item.data["target"], 1, 1, false));
                        send({
                            command:MonsterDebuggerConstants.COMMAND_GET_PROPERTIES,
                            xml:xml
                        });
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_GET_FUNCTIONS:
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null){
                        xml = XML(MonsterDebuggerUtils.parseFunctions(obj, item.data["target"]));
                        send({
                            command:MonsterDebuggerConstants.COMMAND_GET_FUNCTIONS,
                            xml:xml
                        });
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_SET_PROPERTY:
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 1);
                    if (obj != null){
                        try {
                            obj[item.data["name"]] = item.data["value"];
                            send({
                                command:MonsterDebuggerConstants.COMMAND_SET_PROPERTY,
                                target:item.data["target"],
                                value:obj[item.data["name"]]
                            });
                        } catch(e1:Error) {
                        };
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_GET_PREVIEW:
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (((!((obj == null))) && (MonsterDebuggerUtils.isDisplayObject(obj)))){
                        displayObject = (obj as DisplayObject);
                        bitmapData = MonsterDebuggerUtils.snapshot(displayObject, new Rectangle(0, 0, 300, 300));
                        if (bitmapData != null){
                            bytes = bitmapData.getPixels(new Rectangle(0, 0, bitmapData.width, bitmapData.height));
                            send({
                                command:MonsterDebuggerConstants.COMMAND_GET_PREVIEW,
                                bytes:bytes,
                                width:bitmapData.width,
                                height:bitmapData.height
                            });
                        };
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_CALL_METHOD:
                    method = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (((!((method == null))) && ((method is Function)))){
                        if (item.data["returnType"] == MonsterDebuggerConstants.TYPE_VOID){
                            method.apply(null, item.data["arguments"]);
                        } else {
                            try {
                                obj = method.apply(null, item.data["arguments"]);
                                xml = XML(MonsterDebuggerUtils.parse(obj, "", 1, 5, false));
                                send({
                                    command:MonsterDebuggerConstants.COMMAND_CALL_METHOD,
                                    id:item.data["id"],
                                    xml:xml
                                });
                            } catch(e2:Error) {
                            };
                        };
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_PAUSE:
                    MonsterDebuggerUtils.pause();
                    send({command:MonsterDebuggerConstants.COMMAND_PAUSE});
                    break;
                case MonsterDebuggerConstants.COMMAND_RESUME:
                    MonsterDebuggerUtils.resume();
                    send({command:MonsterDebuggerConstants.COMMAND_RESUME});
                    break;
                case MonsterDebuggerConstants.COMMAND_HIGHLIGHT:
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (((!((obj == null))) && (MonsterDebuggerUtils.isDisplayObject(obj)))){
                        if (((!((DisplayObject(obj).stage == null))) && ((DisplayObject(obj).stage is Stage)))){
                            _stage = obj["stage"];
                        };
                        if (_stage != null){
                            highlightClear();
                            send({command:MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT});
                            _highlight.removeEventListener(MouseEvent.CLICK, highlightClicked);
                            _highlight.mouseEnabled = false;
                            _highlightTarget = DisplayObject(obj);
                            _highlightMouse = false;
                            _highlightUpdate = true;
                        };
                    };
                    break;
                case MonsterDebuggerConstants.COMMAND_START_HIGHLIGHT:
                    highlightClear();
                    _highlight.addEventListener(MouseEvent.CLICK, highlightClicked, false, 0, true);
                    _highlight.mouseEnabled = true;
                    _highlightTarget = null;
                    _highlightMouse = true;
                    _highlightUpdate = true;
                    send({command:MonsterDebuggerConstants.COMMAND_START_HIGHLIGHT});
                    break;
                case MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT:
                    highlightClear();
                    _highlight.removeEventListener(MouseEvent.CLICK, highlightClicked);
                    _highlight.mouseEnabled = false;
                    _highlightTarget = null;
                    _highlightMouse = false;
                    _highlightUpdate = false;
                    send({command:MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT});
                    break;
            };
        }
        static function inspect(_arg1):void{
            var _local2:*;
            var _local3:XML;
            if (MonsterDebugger.enabled){
                _base = _arg1;
                _local2 = MonsterDebuggerUtils.getObject(_base, "", 0);
                if (_local2 != null){
                    _local3 = XML(MonsterDebuggerUtils.parse(_local2, "", 1, 2, true));
                    send({
                        command:MonsterDebuggerConstants.COMMAND_BASE,
                        xml:_local3
                    });
                };
            };
        }
        private static function frameHandler(_arg1:Event):void{
            if (MonsterDebugger.enabled){
                _monitorFrames++;
                if (_highlightUpdate){
                    highlightUpdate();
                };
            };
        }
        static function set base(_arg1):void{
            _base = _arg1;
        }
        private static function highlightUpdate():void{
            var _local1:*;
            highlightClear();
            if (_highlightMouse){
                if (((((_base.hasOwnProperty("stage")) && (!((_base["stage"] == null))))) && ((_base["stage"] is Stage)))){
                    _stage = (_base["stage"] as Stage);
                };
                if (Capabilities.playerType == "Desktop"){
                    _local1 = getDefinitionByName("flash.desktop::NativeApplication");
                    if (((!((_local1 == null))) && (!((_local1["nativeApplication"]["activeWindow"] == null))))){
                        _stage = _local1["nativeApplication"]["activeWindow"]["stage"];
                    };
                };
                if (_stage == null){
                    _highlight.removeEventListener(MouseEvent.CLICK, highlightClicked);
                    _highlight.mouseEnabled = false;
                    _highlightTarget = null;
                    _highlightMouse = false;
                    _highlightUpdate = false;
                    return;
                };
                _highlightTarget = MonsterDebuggerUtils.getObjectUnderPoint(_stage, new Point(_stage.mouseX, _stage.mouseY));
                if (_highlightTarget != null){
                    highlightDraw(true);
                };
                return;
            };
            if (_highlightTarget != null){
                if ((((_highlightTarget.stage == null)) || ((_highlightTarget.parent == null)))){
                    _highlight.removeEventListener(MouseEvent.CLICK, highlightClicked);
                    _highlight.mouseEnabled = false;
                    _highlightTarget = null;
                    _highlightMouse = false;
                    _highlightUpdate = false;
                    return;
                };
                highlightDraw(false);
            };
        }
        static function handle(_arg1:MonsterDebuggerData):void{
            if (MonsterDebugger.enabled){
                if ((((_arg1.id == null)) || ((_arg1.id == "")))){
                    return;
                };
                if (_arg1.id == MonsterDebuggerCore.ID){
                    handleInternal(_arg1);
                };
            };
        }
        static function breakpoint(_arg1, _arg2:String="breakpoint"):void{
            var _local3:XML;
            var _local4:Object;
            if (((MonsterDebugger.enabled) && (MonsterDebuggerConnection.connected))){
                _local3 = MonsterDebuggerUtils.stackTrace();
                _local4 = {
                    command:MonsterDebuggerConstants.COMMAND_PAUSE,
                    memory:MonsterDebuggerUtils.getMemory(),
                    date:new Date(),
                    target:String(_arg1),
                    reference:MonsterDebuggerUtils.getReferenceID(_arg1),
                    stack:_local3,
                    id:_arg2
                };
                send(_local4);
                MonsterDebuggerUtils.pause();
            };
        }
        private static function highlightClear():void{
            if (((!((_highlight == null))) && (!((_highlight.parent == null))))){
                _highlight.parent.removeChild(_highlight);
                _highlight.graphics.clear();
                _highlight.x = 0;
                _highlight.y = 0;
            };
            if (((!((_highlightInfo == null))) && (!((_highlightInfo.parent == null))))){
                _highlightInfo.parent.removeChild(_highlightInfo);
                _highlightInfo.x = 0;
                _highlightInfo.y = 0;
            };
        }

    }
}//package com.demonsters.debugger 
﻿package com.demonsters.debugger {

    class MonsterDebuggerConnection {

        private static var connector:IMonsterDebuggerConnection;

        static function initialize():void{
            connector = new MonsterDebuggerConnectionDefault();
        }
        static function processQueue():void{
            connector.processQueue();
        }
        static function set address(_arg1:String):void{
            connector.address = _arg1;
        }
        static function get connected():Boolean{
            return (connector.connected);
        }
        static function connect():void{
            connector.connect();
        }
        static function send(_arg1:String, _arg2:Object, _arg3:Boolean=false):void{
            connector.send(_arg1, _arg2, _arg3);
        }

    }
}//package com.demonsters.debugger 
﻿package com.greensock.loading {

    public class LoaderStatus {

        public static const READY:int = 0;
        public static const LOADING:int = 1;
        public static const COMPLETED:int = 2;
        public static const PAUSED:int = 3;
        public static const FAILED:int = 4;
        public static const DISPOSED:int = 5;

    }
}//package com.greensock.loading 
﻿package com.greensock.loading.core {
    import flash.display.*;
    import flash.events.*;
    import com.greensock.loading.*;
    import flash.net.*;
    import com.greensock.events.*;
    import com.greensock.loading.display.*;
    import flash.system.*;

    public class DisplayObjectLoader extends LoaderItem {

        public static var defaultAutoForceGC:Boolean = true;
        protected static var _gcDispatcher:Sprite;
        protected static var _gcCycles:uint = 0;

        protected var _loader:Loader;
        protected var _sprite:Sprite;
        protected var _context:LoaderContext;
        protected var _initted:Boolean;
        protected var _stealthMode:Boolean;
        protected var _fallbackAudit:Loader;

        public function DisplayObjectLoader(_arg1, _arg2:Object=null){
            super(_arg1, _arg2);
            this._refreshLoader(false);
            if ((LoaderMax.contentDisplayClass is Class)){
                this._sprite = new LoaderMax.contentDisplayClass(this);
                if (!this._sprite.hasOwnProperty("rawContent")){
                    throw (new Error("LoaderMax.contentDisplayClass must be set to a class with a 'rawContent' property, like com.greensock.loading.display.ContentDisplay"));
                };
            } else {
                this._sprite = new ContentDisplay(this);
            };
        }
        public static function forceGC(_arg1:uint=1):void{
            if (_gcCycles < _arg1){
                _gcCycles = _arg1;
                if (_gcDispatcher == null){
                    _gcDispatcher = new Sprite();
                    _gcDispatcher.addEventListener(Event.ENTER_FRAME, _forceGCHandler, false, 0, true);
                };
            };
        }
        protected static function _forceGCHandler(_arg1:Event):void{
            if (--_gcCycles <= 0){
                _gcDispatcher.removeEventListener(Event.ENTER_FRAME, _forceGCHandler);
                _gcDispatcher = null;
            };
            try {
                new LocalConnection().connect("FORCE_GC");
                new LocalConnection().connect("FORCE_GC");
            } catch(error:Error) {
            };
        }

        public function setContentDisplay(_arg1:Sprite):void{
            this._sprite = _arg1;
        }
        override protected function _load():void{
            _prepRequest();
            if ((this.vars.context is LoaderContext)){
                this._context = this.vars.context;
            } else {
                if (this._context == null){
                    if (LoaderMax.defaultContext != null){
                        this._context = LoaderMax.defaultContext;
                        if (_isLocal){
                            this._context.securityDomain = null;
                        };
                    } else {
                        if (!_isLocal){
                            this._context = new LoaderContext(true, new ApplicationDomain(ApplicationDomain.currentDomain), SecurityDomain.currentDomain);
                        };
                    };
                };
            };
            if (Capabilities.playerType != "Desktop"){
                Security.allowDomain(_url);
            };
            this._loader.load(_request, this._context);
        }
        override public function auditSize():void{
            if (Capabilities.playerType != "Desktop"){
                Security.allowDomain(_url);
            };
            super.auditSize();
        }
        override protected function _closeStream():void{
            this._closeFallbackAudit();
            super._closeStream();
        }
        protected function _closeFallbackAudit():void{
            if (this._fallbackAudit != null){
                this._fallbackAudit.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, this._auditStreamHandler, false, 0, true);
                this._fallbackAudit.contentLoaderInfo.addEventListener(Event.COMPLETE, this._auditStreamHandler, false, 0, true);
                this._fallbackAudit.contentLoaderInfo.addEventListener("ioError", this._auditStreamHandler, false, 0, true);
                this._fallbackAudit.contentLoaderInfo.addEventListener("securityError", this._auditStreamHandler, false, 0, true);
                try {
                    this._fallbackAudit.close();
                } catch(error:Error) {
                };
                this._fallbackAudit = null;
            };
        }
        override protected function _auditStreamHandler(_arg1:Event):void{
            var _local2:URLRequest;
            if (_arg1.type == "securityError"){
                if (this._fallbackAudit == null){
                    this._context = new LoaderContext(false);
                    _scriptAccessDenied = true;
                    dispatchEvent(new LoaderEvent(LoaderEvent.SCRIPT_ACCESS_DENIED, this, ErrorEvent(_arg1).text));
                    _errorHandler(_arg1);
                    this._fallbackAudit = new Loader();
                    this._fallbackAudit.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, this._auditStreamHandler, false, 0, true);
                    this._fallbackAudit.contentLoaderInfo.addEventListener(Event.COMPLETE, this._auditStreamHandler, false, 0, true);
                    this._fallbackAudit.contentLoaderInfo.addEventListener("ioError", this._auditStreamHandler, false, 0, true);
                    this._fallbackAudit.contentLoaderInfo.addEventListener("securityError", this._auditStreamHandler, false, 0, true);
                    _local2 = new URLRequest();
                    _local2.data = _request.data;
                    _local2.method = _request.method;
                    _setRequestURL(_local2, _url, ((((!(_isLocal)) || ((_url.substr(0, 4) == "http")))) ? (("gsCacheBusterID=" + _cacheID++) + "&purpose=audit") : ""));
                    if (Capabilities.playerType != "Desktop"){
                        Security.allowDomain(_url);
                    };
                    this._fallbackAudit.load(_local2, this._context);
                    return;
                };
                this._closeFallbackAudit();
            };
            super._auditStreamHandler(_arg1);
        }
        protected function _refreshLoader(_arg1:Boolean=true):void{
            if (this._loader != null){
                if (_status == LoaderStatus.LOADING){
                    try {
                        this._loader.close();
                    } catch(error:Error) {
                    };
                };
                this._loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, _progressHandler);
                this._loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, _completeHandler);
                this._loader.contentLoaderInfo.removeEventListener("ioError", _failHandler);
                this._loader.contentLoaderInfo.removeEventListener("securityError", this._securityErrorHandler);
                this._loader.contentLoaderInfo.removeEventListener("httpStatus", _httpStatusHandler);
                this._loader.contentLoaderInfo.removeEventListener(Event.INIT, this._initHandler);
                if (this._loader.hasOwnProperty("uncaughtErrorEvents")){
                    Object(this._loader).uncaughtErrorEvents.removeEventListener("uncaughtError", _errorHandler);
                };
                if (_arg1){
                    try {
                        if ((((this._loader.parent == null)) && (!((this._sprite == null))))){
                            this._sprite.addChild(this._loader);
                        };
                        if (this._loader.hasOwnProperty("unloadAndStop")){
                            (this._loader as Object).unloadAndStop();
                        } else {
                            this._loader.unload();
                        };
                    } catch(error:Error) {
                    };
                    if (this._loader.parent){
                        this._loader.parent.removeChild(this._loader);
                    };
                    if (((("autoForceGC" in this.vars)) ? this.vars.autoForceGC : defaultAutoForceGC)){
                        forceGC(((this.hasOwnProperty("getClass")) ? 3 : 1));
                    };
                };
            };
            this._initted = false;
            this._loader = new Loader();
            this._loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, _progressHandler, false, 0, true);
            this._loader.contentLoaderInfo.addEventListener(Event.COMPLETE, _completeHandler, false, 0, true);
            this._loader.contentLoaderInfo.addEventListener("ioError", _failHandler, false, 0, true);
            this._loader.contentLoaderInfo.addEventListener("securityError", this._securityErrorHandler, false, 0, true);
            this._loader.contentLoaderInfo.addEventListener("httpStatus", _httpStatusHandler, false, 0, true);
            this._loader.contentLoaderInfo.addEventListener(Event.INIT, this._initHandler, false, 0, true);
            if (this._loader.hasOwnProperty("uncaughtErrorEvents")){
                Object(this._loader).uncaughtErrorEvents.addEventListener("uncaughtError", _errorHandler, false, 0, true);
            };
        }
        override protected function _dump(_arg1:int=0, _arg2:int=0, _arg3:Boolean=false):void{
            if (!this._stealthMode){
                this._refreshLoader(Boolean(!((_arg1 == 2))));
            };
            if (_arg1 == 1){
                (this._sprite as Object).rawContent = null;
            } else {
                if (_arg1 == 2){
                    (this._sprite as Object).loader = null;
                } else {
                    if (_arg1 == 3){
                        (this._sprite as Object).dispose(false, false);
                    };
                };
            };
            super._dump(_arg1, _arg2, _arg3);
        }
        protected function _determineScriptAccess():void{
            if (!_scriptAccessDenied){
                if (!this._loader.contentLoaderInfo.childAllowsParent){
                    _scriptAccessDenied = true;
                    dispatchEvent(new LoaderEvent(LoaderEvent.SCRIPT_ACCESS_DENIED, this, (("Error #2123: Security sandbox violation: " + this) + ". No policy files granted access.")));
                };
            };
        }
        protected function _securityErrorHandler(_arg1:ErrorEvent):void{
            if (((((!((this._context == null))) && (this._context.checkPolicyFile))) && (!((this.vars.context is LoaderContext))))){
                this._context = new LoaderContext(false);
                _scriptAccessDenied = true;
                dispatchEvent(new LoaderEvent(LoaderEvent.SCRIPT_ACCESS_DENIED, this, _arg1.text));
                _errorHandler(_arg1);
                this._load();
            } else {
                _failHandler(_arg1);
            };
        }
        protected function _initHandler(_arg1:Event):void{
            if (!this._initted){
                this._initted = true;
                if (_content == null){
                    _content = ((_scriptAccessDenied) ? this._loader : this._loader.content);
                };
                (this._sprite as Object).rawContent = (_content as DisplayObject);
                dispatchEvent(new LoaderEvent(LoaderEvent.INIT, this));
            };
        }
        override public function get content(){
            return (this._sprite);
        }
        public function get rawContent(){
            return (_content);
        }

    }
}//package com.greensock.loading.core 
﻿package com.greensock.loading.core {
    import flash.events.*;
    import com.greensock.loading.*;
    import flash.net.*;
    import com.greensock.events.*;

    public class LoaderItem extends LoaderCore {

        protected static var _cacheID:Number = new Date().getTime();

        protected var _url:String;
        protected var _request:URLRequest;
        protected var _scriptAccessDenied:Boolean;
        protected var _auditStream:URLStream;
        protected var _preferEstimatedBytesInAudit:Boolean;
        protected var _httpStatus:int;
        protected var _skipAlternateURL:Boolean;

        public function LoaderItem(_arg1, _arg2:Object=null){
            super(_arg2);
            this._request = (((_arg1 is URLRequest)) ? (_arg1 as URLRequest) : new URLRequest(_arg1));
            this._url = this._request.url;
            this._setRequestURL(this._request, this._url);
        }
        protected function _prepRequest():void{
            this._scriptAccessDenied = false;
            this._httpStatus = 0;
            this._closeStream();
            if (((this.vars.noCache) && (((!(_isLocal)) || ((this._url.substr(0, 4) == "http")))))){
                this._setRequestURL(this._request, this._url, ("gsCacheBusterID=" + _cacheID++));
            };
        }
        protected function _setRequestURL(_arg1:URLRequest, _arg2:String, _arg3:String=""):void{
            var _local8:URLVariables;
            var _local9:Array;
            var _local4:Array = ((this.vars.allowMalformedURL) ? [_arg2] : _arg2.split("?"));
            var _local5:String = _local4[0];
            var _local6 = "";
            var _local7:int;
            while (_local7 < _local5.length) {
                _local6 = (_local6 + _local5.charAt(_local7));
                _local7++;
            };
            _arg1.url = _local6;
            if (_local4.length >= 2){
                _arg3 = (_arg3 + ((_arg3)=="") ? _local4[1] : ("&" + _local4[1]));
            };
            if (_arg3 != ""){
                _local8 = (((_arg1.data is URLVariables)) ? (_arg1.data as URLVariables) : new URLVariables());
                _local4 = _arg3.split("&");
                _local7 = _local4.length;
                while (--_local7 > -1) {
                    _local9 = _local4[_local7].split("=");
                    _local8[_local9.shift()] = _local9.join("=");
                };
                _arg1.data = _local8;
            };
        }
        override protected function _dump(_arg1:int=0, _arg2:int=0, _arg3:Boolean=false):void{
            this._closeStream();
            super._dump(_arg1, _arg2, _arg3);
        }
        override public function auditSize():void{
            var _local1:URLRequest;
            if (this._auditStream == null){
                this._auditStream = new URLStream();
                this._auditStream.addEventListener(ProgressEvent.PROGRESS, this._auditStreamHandler, false, 0, true);
                this._auditStream.addEventListener(Event.COMPLETE, this._auditStreamHandler, false, 0, true);
                this._auditStream.addEventListener("ioError", this._auditStreamHandler, false, 0, true);
                this._auditStream.addEventListener("securityError", this._auditStreamHandler, false, 0, true);
                _local1 = new URLRequest();
                _local1.data = this._request.data;
                _local1.method = this._request.method;
                this._setRequestURL(_local1, this._url, ((((!(_isLocal)) || ((this._url.substr(0, 4) == "http")))) ? (("gsCacheBusterID=" + _cacheID++) + "&purpose=audit") : ""));
                this._auditStream.load(_local1);
            };
        }
        protected function _closeStream():void{
            if (this._auditStream != null){
                this._auditStream.removeEventListener(ProgressEvent.PROGRESS, this._auditStreamHandler);
                this._auditStream.removeEventListener(Event.COMPLETE, this._auditStreamHandler);
                this._auditStream.removeEventListener("ioError", this._auditStreamHandler);
                this._auditStream.removeEventListener("securityError", this._auditStreamHandler);
                try {
                    this._auditStream.close();
                } catch(error:Error) {
                };
                this._auditStream = null;
            };
        }
        protected function _auditStreamHandler(_arg1:Event):void{
            var _local2:URLRequest;
            if ((_arg1 is ProgressEvent)){
                _cachedBytesTotal = (_arg1 as ProgressEvent).bytesTotal;
                if (((this._preferEstimatedBytesInAudit) && ((uint(this.vars.estimatedBytes) > _cachedBytesTotal)))){
                    _cachedBytesTotal = uint(this.vars.estimatedBytes);
                };
            } else {
                if ((((_arg1.type == "ioError")) || ((_arg1.type == "securityError")))){
                    if (((((!((this.vars.alternateURL == undefined))) && (!((this.vars.alternateURL == ""))))) && (!((this.vars.alternateURL == this._url))))){
                        _errorHandler(_arg1);
                        if (_status != LoaderStatus.DISPOSED){
                            this._url = this.vars.alternateURL;
                            this._setRequestURL(this._request, this._url);
                            _local2 = new URLRequest();
                            _local2.data = this._request.data;
                            _local2.method = this._request.method;
                            this._setRequestURL(_local2, this._url, ((((!(_isLocal)) || ((this._url.substr(0, 4) == "http")))) ? (("gsCacheBusterID=" + _cacheID++) + "&purpose=audit") : ""));
                            this._auditStream.load(_local2);
                        };
                        return;
                    };
                    super._failHandler(_arg1);
                };
            };
            _auditedSize = true;
            this._closeStream();
            dispatchEvent(new Event("auditedSize"));
        }
        override protected function _failHandler(_arg1:Event, _arg2:Boolean=true):void{
            if (((((!((this.vars.alternateURL == undefined))) && (!((this.vars.alternateURL == ""))))) && (!(this._skipAlternateURL)))){
                _errorHandler(_arg1);
                this._skipAlternateURL = true;
                this._url = ("temp" + Math.random());
                this.url = this.vars.alternateURL;
            } else {
                super._failHandler(_arg1, _arg2);
            };
        }
        protected function _httpStatusHandler(_arg1:Event):void{
            this._httpStatus = (_arg1 as Object).status;
            dispatchEvent(new LoaderEvent(LoaderEvent.HTTP_STATUS, this));
        }
        public function get url():String{
            return (this._url);
        }
        public function set url(_arg1:String):void{
            var _local2:Boolean;
            if (this._url != _arg1){
                this._url = _arg1;
                this._setRequestURL(this._request, this._url);
                _local2 = Boolean((_status == LoaderStatus.LOADING));
                this._dump(1, LoaderStatus.READY, true);
                _auditedSize = Boolean(((!((uint(this.vars.estimatedBytes) == 0))) && (!((this.vars.auditSize == true)))));
                _cachedBytesTotal = ((uint(this.vars.estimatedBytes))!=0) ? uint(this.vars.estimatedBytes) : LoaderMax.defaultEstimatedBytes;
                _cacheIsDirty = true;
                if (_local2){
                    _load();
                };
            };
        }
        public function get request():URLRequest{
            return (this._request);
        }
        public function get httpStatus():int{
            return (this._httpStatus);
        }
        public function get scriptAccessDenied():Boolean{
            return (this._scriptAccessDenied);
        }

    }
}//package com.greensock.loading.core 
﻿package com.greensock.loading.core {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import com.greensock.loading.*;
    import flash.net.*;
    import com.greensock.events.*;
    import flash.system.*;

    public class LoaderCore extends EventDispatcher {

        public static const version:Number = 1.87;

        protected static var _loaderCount:uint = 0;
        protected static var _rootLookup:Dictionary = new Dictionary(false);
        protected static var _isLocal:Boolean;
        protected static var _globalRootLoader:LoaderMax;
        protected static var _listenerTypes:Object = {
            onOpen:"open",
            onInit:"init",
            onComplete:"complete",
            onProgress:"progress",
            onCancel:"cancel",
            onFail:"fail",
            onError:"error",
            onSecurityError:"securityError",
            onHTTPStatus:"httpStatus",
            onIOError:"ioError",
            onScriptAccessDenied:"scriptAccessDenied",
            onChildOpen:"childOpen",
            onChildCancel:"childCancel",
            onChildComplete:"childComplete",
            onChildProgress:"childProgress",
            onChildFail:"childFail",
            onRawLoad:"rawLoad",
            onUncaughtError:"uncaughtError"
        };
        protected static var _types:Object = {};
        protected static var _extensions:Object = {};

        protected var _cachedBytesLoaded:uint;
        protected var _cachedBytesTotal:uint;
        protected var _status:int;
        protected var _prePauseStatus:int;
        protected var _dispatchProgress:Boolean;
        protected var _rootLoader:LoaderMax;
        protected var _cacheIsDirty:Boolean;
        protected var _auditedSize:Boolean;
        protected var _dispatchChildProgress:Boolean;
        protected var _type:String;
        protected var _time:uint;
        protected var _content;
        public var vars:Object;
        public var name:String;
        public var autoDispose:Boolean;

        public function LoaderCore(_arg1:Object=null){
            var _local2:String;
            super();
            this.vars = ((_arg1)!=null) ? _arg1 : {};
            if (this.vars.isGSVars){
                this.vars = this.vars.vars;
            };
            this.name = ((((!((this.vars.name == undefined))) && (!((String(this.vars.name) == ""))))) ? this.vars.name : ("loader" + _loaderCount++));
            this._cachedBytesLoaded = 0;
            this._cachedBytesTotal = ((uint(this.vars.estimatedBytes))!=0) ? uint(this.vars.estimatedBytes) : LoaderMax.defaultEstimatedBytes;
            this.autoDispose = Boolean((this.vars.autoDispose == true));
            this._status = ((this.vars.paused)==true) ? LoaderStatus.PAUSED : LoaderStatus.READY;
            this._auditedSize = Boolean(((!((uint(this.vars.estimatedBytes) == 0))) && (!((this.vars.auditSize == true)))));
            if (_globalRootLoader == null){
                if (this.vars.__isRoot == true){
                    return;
                };
                _globalRootLoader = new LoaderMax({
                    name:"root",
                    __isRoot:true
                });
                _isLocal = Boolean((((Capabilities.playerType == "Desktop")) || ((new LocalConnection().domain == "localhost"))));
            };
            this._rootLoader = (((this.vars.requireWithRoot is DisplayObject)) ? _rootLookup[this.vars.requireWithRoot] : _globalRootLoader);
            if (this._rootLoader == null){
                _rootLookup[this.vars.requireWithRoot] = (this._rootLoader = new LoaderMax());
                this._rootLoader.name = ("subloaded_swf_" + ((this.vars.requireWithRoot.loaderInfo)!=null) ? this.vars.requireWithRoot.loaderInfo.url : String(_loaderCount));
                this._rootLoader.skipFailed = false;
            };
            for (_local2 in _listenerTypes) {
                if ((((_local2 in this.vars)) && ((this.vars[_local2] is Function)))){
                    this.addEventListener(_listenerTypes[_local2], this.vars[_local2], false, 0, true);
                };
            };
            this._rootLoader.append(this);
        }
        protected static function _activateClass(_arg1:String, _arg2:Class, _arg3:String):Boolean{
            if (_arg1 != ""){
                _types[_arg1.toLowerCase()] = _arg2;
            };
            var _local4:Array = _arg3.split(",");
            var _local5:int = _local4.length;
            while (--_local5 > -1) {
                _extensions[_local4[_local5]] = _arg2;
            };
            return (true);
        }

        public function load(_arg1:Boolean=false):void{
            var _local2:uint = getTimer();
            if (this.status == LoaderStatus.PAUSED){
                this._status = ((this._prePauseStatus)<=LoaderStatus.LOADING) ? LoaderStatus.READY : this._prePauseStatus;
                if ((((this._status == LoaderStatus.READY)) && ((this is LoaderMax)))){
                    _local2 = (_local2 - this._time);
                };
            };
            if (((_arg1) || ((this._status == LoaderStatus.FAILED)))){
                this._dump(1, LoaderStatus.READY);
            };
            if (this._status == LoaderStatus.READY){
                this._status = LoaderStatus.LOADING;
                this._time = _local2;
                this._load();
                if (this.progress < 1){
                    dispatchEvent(new LoaderEvent(LoaderEvent.OPEN, this));
                };
            } else {
                if (this._status == LoaderStatus.COMPLETED){
                    this._completeHandler(null);
                };
            };
        }
        protected function _load():void{
        }
        public function pause():void{
            this.paused = true;
        }
        public function resume():void{
            this.paused = false;
            this.load(false);
        }
        public function cancel():void{
            if (this._status == LoaderStatus.LOADING){
                this._dump(0, LoaderStatus.READY);
            };
        }
        protected function _dump(_arg1:int=0, _arg2:int=0, _arg3:Boolean=false):void{
            var _local5:String;
            this._content = null;
            var _local4:Boolean = Boolean((this._status == LoaderStatus.LOADING));
            if ((((((this._status == LoaderStatus.PAUSED)) && (!((_arg2 == LoaderStatus.PAUSED))))) && (!((_arg2 == LoaderStatus.FAILED))))){
                this._prePauseStatus = _arg2;
            } else {
                if (this._status != LoaderStatus.DISPOSED){
                    this._status = _arg2;
                };
            };
            if (_local4){
                this._time = (getTimer() - this._time);
            };
            this._cachedBytesLoaded = 0;
            if (this._status < LoaderStatus.FAILED){
                if ((this is LoaderMax)){
                    this._calculateProgress();
                };
                if (((this._dispatchProgress) && (!(_arg3)))){
                    dispatchEvent(new LoaderEvent(LoaderEvent.PROGRESS, this));
                };
            };
            if (!_arg3){
                if (_local4){
                    dispatchEvent(new LoaderEvent(LoaderEvent.CANCEL, this));
                };
                if (_arg1 != 2){
                    dispatchEvent(new LoaderEvent(LoaderEvent.UNLOAD, this));
                };
            };
            if (_arg2 == LoaderStatus.DISPOSED){
                if (!_arg3){
                    dispatchEvent(new Event("dispose"));
                };
                for (_local5 in _listenerTypes) {
                    if ((((_local5 in this.vars)) && ((this.vars[_local5] is Function)))){
                        this.removeEventListener(_listenerTypes[_local5], this.vars[_local5]);
                    };
                };
            };
        }
        public function unload():void{
            this._dump(1, LoaderStatus.READY);
        }
        public function dispose(_arg1:Boolean=false):void{
            this._dump(((_arg1) ? 3 : 2), LoaderStatus.DISPOSED);
        }
        public function prioritize(_arg1:Boolean=true):void{
            dispatchEvent(new Event("prioritize"));
            if (((((_arg1) && (!((this._status == LoaderStatus.COMPLETED))))) && (!((this._status == LoaderStatus.LOADING))))){
                this.load(false);
            };
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (_arg1 == LoaderEvent.PROGRESS){
                this._dispatchProgress = true;
            } else {
                if ((((_arg1 == LoaderEvent.CHILD_PROGRESS)) && ((this is LoaderMax)))){
                    this._dispatchChildProgress = true;
                };
            };
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        protected function _calculateProgress():void{
        }
        public function auditSize():void{
        }
        override public function toString():String{
            return (((((this._type + " '") + this.name) + "'") + (((this is LoaderItem)) ? ((" (" + (this as LoaderItem).url) + ")") : "")));
        }
        protected function _progressHandler(_arg1:Event):void{
            if ((_arg1 is ProgressEvent)){
                this._cachedBytesLoaded = (_arg1 as ProgressEvent).bytesLoaded;
                this._cachedBytesTotal = (_arg1 as ProgressEvent).bytesTotal;
                if (!this._auditedSize){
                    this._auditedSize = true;
                    dispatchEvent(new Event("auditedSize"));
                };
            };
            if (((((this._dispatchProgress) && ((this._status == LoaderStatus.LOADING)))) && (!((this._cachedBytesLoaded == this._cachedBytesTotal))))){
                dispatchEvent(new LoaderEvent(LoaderEvent.PROGRESS, this));
            };
        }
        protected function _completeHandler(_arg1:Event=null):void{
            this._cachedBytesLoaded = this._cachedBytesTotal;
            if (this._status != LoaderStatus.COMPLETED){
                dispatchEvent(new LoaderEvent(LoaderEvent.PROGRESS, this));
                this._status = LoaderStatus.COMPLETED;
                this._time = (getTimer() - this._time);
            };
            dispatchEvent(new LoaderEvent(LoaderEvent.COMPLETE, this));
            if (this.autoDispose){
                this.dispose();
            };
        }
        protected function _errorHandler(_arg1:Event):void{
            var _local2:Object = _arg1.target;
            _local2 = (((((_arg1 is LoaderEvent)) && (this.hasOwnProperty("getChildren")))) ? _arg1.target : this);
            var _local3 = "";
            if (((_arg1.hasOwnProperty("error")) && ((Object(_arg1).error is Error)))){
                _local3 = Object(_arg1).error.message;
            } else {
                if (_arg1.hasOwnProperty("text")){
                    _local3 = Object(_arg1).text;
                };
            };
            if (((((!((_arg1.type == LoaderEvent.ERROR))) && (!((_arg1.type == LoaderEvent.FAIL))))) && (this.hasEventListener(_arg1.type)))){
                dispatchEvent(new LoaderEvent(_arg1.type, _local2, _local3, _arg1));
            };
            if (_arg1.type != "uncaughtError"){
                trace((((("----\nError on " + this.toString()) + ": ") + _local3) + "\n----"));
                if (this.hasEventListener(LoaderEvent.ERROR)){
                    dispatchEvent(new LoaderEvent(LoaderEvent.ERROR, _local2, ((this.toString() + " > ") + _local3), _arg1));
                };
            };
        }
        protected function _failHandler(_arg1:Event, _arg2:Boolean=true):void{
            var _local3:Object;
            this._dump(0, LoaderStatus.FAILED);
            if (_arg2){
                this._errorHandler(_arg1);
            } else {
                _local3 = _arg1.target;
            };
            dispatchEvent(new LoaderEvent(LoaderEvent.FAIL, (((((_arg1 is LoaderEvent)) && (this.hasOwnProperty("getChildren")))) ? _arg1.target : this), ((this.toString() + " > ") + (_arg1 as Object).text), _arg1));
        }
        protected function _passThroughEvent(_arg1:Event):void{
            var _local2:String = _arg1.type;
            var _local3:Object = this;
            if (this.hasOwnProperty("getChildren")){
                if ((_arg1 is LoaderEvent)){
                    _local3 = _arg1.target;
                };
                if (_local2 == "complete"){
                    _local2 = "childComplete";
                } else {
                    if (_local2 == "open"){
                        _local2 = "childOpen";
                    } else {
                        if (_local2 == "cancel"){
                            _local2 = "childCancel";
                        } else {
                            if (_local2 == "fail"){
                                _local2 = "childFail";
                            };
                        };
                    };
                };
            };
            if (this.hasEventListener(_local2)){
                dispatchEvent(new LoaderEvent(_local2, _local3, ((_arg1.hasOwnProperty("text")) ? Object(_arg1).text : ""), (((((_arg1 is LoaderEvent)) && (!((LoaderEvent(_arg1).data == null))))) ? LoaderEvent(_arg1).data : _arg1)));
            };
        }
        public function get paused():Boolean{
            return (Boolean((this._status == LoaderStatus.PAUSED)));
        }
        public function set paused(_arg1:Boolean):void{
            if (((_arg1) && (!((this._status == LoaderStatus.PAUSED))))){
                this._prePauseStatus = this._status;
                if (this._status == LoaderStatus.LOADING){
                    this._dump(0, LoaderStatus.PAUSED);
                };
                this._status = LoaderStatus.PAUSED;
            } else {
                if (((!(_arg1)) && ((this._status == LoaderStatus.PAUSED)))){
                    if (this._prePauseStatus == LoaderStatus.LOADING){
                        this.load(false);
                    } else {
                        this._status = ((this._prePauseStatus) || (LoaderStatus.READY));
                    };
                };
            };
        }
        public function get status():int{
            return (this._status);
        }
        public function get bytesLoaded():uint{
            if (this._cacheIsDirty){
                this._calculateProgress();
            };
            return (this._cachedBytesLoaded);
        }
        public function get bytesTotal():uint{
            if (this._cacheIsDirty){
                this._calculateProgress();
            };
            return (this._cachedBytesTotal);
        }
        public function get progress():Number{
            return (((this.bytesTotal)!=0) ? (this._cachedBytesLoaded / this._cachedBytesTotal) : ((this._status)==LoaderStatus.COMPLETED) ? 1 : 0);
        }
        public function get rootLoader():LoaderMax{
            return (this._rootLoader);
        }
        public function get content(){
            return (this._content);
        }
        public function get auditedSize():Boolean{
            return (this._auditedSize);
        }
        public function get loadTime():Number{
            if (this._status == LoaderStatus.READY){
                return (0);
            };
            if (this._status == LoaderStatus.LOADING){
                return (((getTimer() - this._time) / 1000));
            };
            return ((this._time / 1000));
        }

    }
}//package com.greensock.loading.core 
﻿package com.greensock.loading.display {
    import flash.display.*;
    import flash.geom.*;
    import com.greensock.loading.core.*;
    import flash.media.*;

    public class ContentDisplay extends Sprite {

        protected static var _transformProps:Object = {
            x:1,
            y:1,
            z:1,
            rotationX:1,
            rotationY:1,
            rotationZ:1,
            scaleX:1,
            scaleY:1,
            rotation:1,
            alpha:1,
            visible:true,
            blendMode:"normal",
            centerRegistration:false,
            crop:false,
            scaleMode:"stretch",
            hAlign:"center",
            vAlign:"center"
        };

        protected var _loader:LoaderItem;
        protected var _rawContent:DisplayObject;
        protected var _centerRegistration:Boolean;
        protected var _crop:Boolean;
        protected var _scaleMode:String = "stretch";
        protected var _hAlign:String = "center";
        protected var _vAlign:String = "center";
        protected var _bgColor:uint;
        protected var _bgAlpha:Number = 0;
        protected var _fitWidth:Number;
        protected var _fitHeight:Number;
        protected var _cropContainer:Sprite;
        protected var _nativeRect:Rectangle;
        public var gcProtect;
        public var data;

        public function ContentDisplay(_arg1:LoaderItem){
            this.loader = _arg1;
        }
        public function dispose(_arg1:Boolean=true, _arg2:Boolean=true):void{
            this.rawContent = null;
            if (this.parent != null){
                this.parent.removeChild(this);
            };
            this.gcProtect = null;
            if (this._loader != null){
                if (_arg1){
                    this._loader.unload();
                };
                if (_arg2){
                    this._loader.dispose(false);
                    this._loader = null;
                };
            };
        }
        protected function _update():void{
            var _local5:Object;
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local1:Number = ((((this._centerRegistration) && ((this._fitWidth > 0)))) ? (this._fitWidth / -2) : 0);
            var _local2:Number = ((((this._centerRegistration) && ((this._fitHeight > 0)))) ? (this._fitHeight / -2) : 0);
            graphics.clear();
            if ((((this._fitWidth > 0)) && ((this._fitHeight > 0)))){
                graphics.beginFill(this._bgColor, this._bgAlpha);
                graphics.drawRect(_local1, _local2, this._fitWidth, this._fitHeight);
                graphics.endFill();
            };
            if (this._rawContent == null){
                return;
            };
            var _local3:DisplayObject = this._rawContent;
            var _local4:Matrix = _local3.transform.matrix;
            if ((_local3 is Video)){
                _local5 = this._nativeRect;
                _local6 = _local3.width;
                _local7 = _local3.height;
            } else {
                if ((_local3 is Loader)){
                    _local5 = Loader(_local3).contentLoaderInfo;
                } else {
                    if (((!((this._loader == null))) && (this._loader.hasOwnProperty("getClass")))){
                        _local5 = _local3.loaderInfo;
                    } else {
                        _local5 = _local3.getBounds(_local3);
                    };
                };
                _local6 = ((_local5.width * Math.abs(_local4.a)) + (_local5.height * Math.abs(_local4.b)));
                _local7 = ((_local5.width * Math.abs(_local4.c)) + (_local5.height * Math.abs(_local4.d)));
            };
            if ((((this._fitWidth > 0)) && ((this._fitHeight > 0)))){
                _local8 = this._fitWidth;
                _local9 = this._fitHeight;
                _local10 = (_local8 - _local6);
                _local11 = (_local9 - _local7);
                if (this._scaleMode != "none"){
                    _local12 = (_local8 / _local9);
                    _local13 = (_local5.width / _local5.height);
                    if ((((((_local13 < _local12)) && ((this._scaleMode == "proportionalInside")))) || ((((_local13 > _local12)) && ((this._scaleMode == "proportionalOutside")))))){
                        _local8 = (_local9 * _local13);
                    };
                    if ((((((_local13 > _local12)) && ((this._scaleMode == "proportionalInside")))) || ((((_local13 < _local12)) && ((this._scaleMode == "proportionalOutside")))))){
                        _local9 = (_local8 / _local13);
                    };
                    if (this._scaleMode != "heightOnly"){
                        _local3.width = (_local3.width * (_local8 / _local6));
                        _local10 = (this._fitWidth - _local8);
                    };
                    if (this._scaleMode != "widthOnly"){
                        _local3.height = (_local3.height * (_local9 / _local7));
                        _local11 = (this._fitHeight - _local9);
                    };
                };
                if (this._hAlign == "left"){
                    _local10 = 0;
                } else {
                    if (this._hAlign != "right"){
                        _local10 = (_local10 / 2);
                    };
                };
                if (this._vAlign == "top"){
                    _local11 = 0;
                } else {
                    if (this._vAlign != "bottom"){
                        _local11 = (_local11 / 2);
                    };
                };
                if (this._crop){
                    if ((((this._cropContainer == null)) || (!((_local3.parent == this._cropContainer))))){
                        this._cropContainer = new Sprite();
                        this.addChildAt(this._cropContainer, this.getChildIndex(_local3));
                        this._cropContainer.addChild(_local3);
                    };
                    this._cropContainer.x = _local1;
                    this._cropContainer.y = _local2;
                    this._cropContainer.scrollRect = new Rectangle(0, 0, this._fitWidth, this._fitHeight);
                    _local3.x = _local10;
                    _local3.y = _local11;
                } else {
                    if (this._cropContainer != null){
                        this.addChildAt(_local3, this.getChildIndex(this._cropContainer));
                        this._cropContainer = null;
                    };
                    _local3.x = (_local1 + _local10);
                    _local3.y = (_local2 + _local11);
                };
            } else {
                _local3.x = ((this._centerRegistration) ? (_local6 / -2) : 0);
                _local3.y = ((this._centerRegistration) ? (_local7 / -2) : 0);
            };
        }
        public function get fitWidth():Number{
            return (this._fitWidth);
        }
        public function set fitWidth(_arg1:Number):void{
            this._fitWidth = _arg1;
            this._update();
        }
        public function get fitHeight():Number{
            return (this._fitHeight);
        }
        public function set fitHeight(_arg1:Number):void{
            this._fitHeight = _arg1;
            this._update();
        }
        public function get scaleMode():String{
            return (this._scaleMode);
        }
        public function set scaleMode(_arg1:String):void{
            if (this._rawContent != null){
                this._rawContent.scaleX = (this._rawContent.scaleY = 1);
            };
            this._scaleMode = _arg1;
            this._update();
        }
        public function get centerRegistration():Boolean{
            return (this._centerRegistration);
        }
        public function set centerRegistration(_arg1:Boolean):void{
            this._centerRegistration = _arg1;
            this._update();
        }
        public function get crop():Boolean{
            return (this._crop);
        }
        public function set crop(_arg1:Boolean):void{
            this._crop = _arg1;
            this._update();
        }
        public function get hAlign():String{
            return (this._hAlign);
        }
        public function set hAlign(_arg1:String):void{
            this._hAlign = _arg1;
            this._update();
        }
        public function get vAlign():String{
            return (this._vAlign);
        }
        public function set vAlign(_arg1:String):void{
            this._vAlign = _arg1;
            this._update();
        }
        public function get bgColor():uint{
            return (this._bgColor);
        }
        public function set bgColor(_arg1:uint):void{
            this._bgColor = _arg1;
            this._update();
        }
        public function get bgAlpha():Number{
            return (this._bgAlpha);
        }
        public function set bgAlpha(_arg1:Number):void{
            this._bgAlpha = _arg1;
            this._update();
        }
        public function get rawContent(){
            return (this._rawContent);
        }
        public function set rawContent(_arg1):void{
            if (((!((this._rawContent == null))) && (!((this._rawContent == _arg1))))){
                if (this._rawContent.parent == this){
                    removeChild(this._rawContent);
                } else {
                    if (((!((this._cropContainer == null))) && ((this._rawContent.parent == this._cropContainer)))){
                        this._cropContainer.removeChild(this._rawContent);
                        removeChild(this._cropContainer);
                        this._cropContainer = null;
                    };
                };
            };
            this._rawContent = (_arg1 as DisplayObject);
            if (this._rawContent == null){
                return;
            };
            if ((((this._rawContent.parent == null)) || (((!((this._rawContent.parent == this))) && (!((this._rawContent.parent == this._cropContainer))))))){
                addChildAt((this._rawContent as DisplayObject), 0);
            };
            this._nativeRect = new Rectangle(0, 0, this._rawContent.width, this._rawContent.height);
            this._update();
        }
        public function get loader():LoaderItem{
            return (this._loader);
        }
        public function set loader(_arg1:LoaderItem):void{
            var _local2:String;
            var _local3:String;
            this._loader = _arg1;
            if (this._loader == null){
                return;
            };
            if (!this._loader.hasOwnProperty("setContentDisplay")){
                throw (new Error("Incompatible loader used for a ContentDisplay"));
            };
            this.name = this._loader.name;
            for (_local3 in _transformProps) {
                if ((_local3 in this._loader.vars)){
                    _local2 = typeof(_transformProps[_local3]);
                    this[_local3] = ((_local2)=="number") ? Number(this._loader.vars[_local3]) : ((_local2)=="string") ? String(this._loader.vars[_local3]) : Boolean(this._loader.vars[_local3]);
                };
            };
            this._bgColor = uint(this._loader.vars.bgColor);
            this._bgAlpha = ((("bgAlpha" in this._loader.vars)) ? Number(this._loader.vars.bgAlpha) : ((("bgColor" in this._loader.vars)) ? 1 : 0));
            this._fitWidth = ((("fitWidth" in this._loader.vars)) ? Number(this._loader.vars.fitWidth) : Number(this._loader.vars.width));
            this._fitHeight = ((("fitHeight" in this._loader.vars)) ? Number(this._loader.vars.fitHeight) : Number(this._loader.vars.height));
            this._update();
            if ((this._loader.vars.container is DisplayObjectContainer)){
                (this._loader.vars.container as DisplayObjectContainer).addChild(this);
            };
            if (this._loader.content != this){
                (this._loader as Object).setContentDisplay(this);
            };
            this.rawContent = (this._loader as Object).rawContent;
        }

    }
}//package com.greensock.loading.display 
﻿package com.greensock.loading {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import com.greensock.loading.core.*;
    import com.greensock.events.*;
    import flash.media.*;

    public class SWFLoader extends DisplayObjectLoader {

        private static var _classActivated:Boolean = _activateClass("SWFLoader", SWFLoader, "swf");

        protected var _lastPTUncaughtError:Event;
        protected var _queue:LoaderMax;
        protected var _hasRSL:Boolean;
        protected var _rslAddedCount:uint;
        protected var _loaderCompleted:Boolean;
        protected var _loadOnExitStealth:Boolean;
        protected var _loaderFailed:Boolean;

        public function SWFLoader(_arg1, _arg2:Object=null){
            super(_arg1, _arg2);
            _preferEstimatedBytesInAudit = true;
            _type = "SWFLoader";
        }
        override protected function _load():void{
            if (_stealthMode){
                _stealthMode = this._loadOnExitStealth;
            } else {
                if (!_initted){
                    _loader.visible = false;
                    _sprite.addChild(_loader);
                    super._load();
                } else {
                    if (this._queue != null){
                        this._changeQueueListeners(true);
                        this._queue.load(false);
                    };
                };
            };
        }
        override protected function _refreshLoader(_arg1:Boolean=true):void{
            super._refreshLoader(_arg1);
            this._loaderCompleted = false;
        }
        protected function _changeQueueListeners(_arg1:Boolean):void{
            var _local2:String;
            if (this._queue != null){
                if (((_arg1) && (!((this.vars.integrateProgress == false))))){
                    for (_local2 in _listenerTypes) {
                        if (((!((_local2 == "onProgress"))) && (!((_local2 == "onInit"))))){
                            this._queue.addEventListener(_listenerTypes[_local2], this._passThroughEvent, false, -100, true);
                        };
                    };
                    this._queue.addEventListener(LoaderEvent.COMPLETE, this._completeHandler, false, -100, true);
                    this._queue.addEventListener(LoaderEvent.PROGRESS, this._progressHandler, false, -100, true);
                    this._queue.addEventListener(LoaderEvent.FAIL, this._failHandler, false, -100, true);
                } else {
                    this._queue.removeEventListener(LoaderEvent.COMPLETE, this._completeHandler);
                    this._queue.removeEventListener(LoaderEvent.PROGRESS, this._progressHandler);
                    this._queue.removeEventListener(LoaderEvent.FAIL, this._failHandler);
                    for (_local2 in _listenerTypes) {
                        if (((!((_local2 == "onProgress"))) && (!((_local2 == "onInit"))))){
                            this._queue.removeEventListener(_listenerTypes[_local2], this._passThroughEvent);
                        };
                    };
                };
            };
        }
        override protected function _dump(_arg1:int=0, _arg2:int=0, _arg3:Boolean=false):void{
            var _local4:*;
            this._loaderCompleted = false;
            if ((((((_status == LoaderStatus.LOADING)) && (!(_initted)))) && (!(this._loaderFailed)))){
                _stealthMode = true;
                super._dump(_arg1, _arg2, _arg3);
                return;
            };
            if (((((_initted) && (!(_scriptAccessDenied)))) && (!((_arg1 == 2))))){
                this._stopMovieClips(_loader.content);
                if ((_loader.content in _rootLookup)){
                    this._queue = LoaderMax(_rootLookup[_loader.content]);
                    this._changeQueueListeners(false);
                    if (_arg1 == 0){
                        this._queue.cancel();
                    } else {
                        delete _rootLookup[_loader.content];
                        this._queue.dispose(Boolean(!((_arg1 == 2))));
                    };
                };
            };
            if (_stealthMode){
                try {
                    _loader.close();
                } catch(error:Error) {
                };
            };
            this._loadOnExitStealth = false;
            _stealthMode = (this._hasRSL = (this._loaderFailed = false));
            _cacheIsDirty = true;
            if (_arg1 >= 1){
                this._queue = null;
                _initted = false;
                super._dump(_arg1, _arg2, _arg3);
            } else {
                _local4 = _content;
                super._dump(_arg1, _arg2, _arg3);
                _content = _local4;
            };
        }
        protected function _stopMovieClips(_arg1:DisplayObject):void{
            var _local2:MovieClip = (_arg1 as MovieClip);
            if (_local2 == null){
                return;
            };
            _local2.stop();
            var _local3:int = _local2.numChildren;
            while (--_local3 > -1) {
                this._stopMovieClips(_local2.getChildAt(_local3));
            };
        }
        override protected function _determineScriptAccess():void{
            var mc:* = null;
            try {
                mc = _loader.content;
            } catch(error:Error) {
                _scriptAccessDenied = true;
                dispatchEvent(new LoaderEvent(LoaderEvent.SCRIPT_ACCESS_DENIED, this, error.message));
                return;
            };
            if ((_loader.content is AVM1Movie)){
                _scriptAccessDenied = true;
                dispatchEvent(new LoaderEvent(LoaderEvent.SCRIPT_ACCESS_DENIED, this, "AVM1Movie denies script access"));
            };
        }
        override protected function _calculateProgress():void{
            _cachedBytesLoaded = ((_stealthMode) ? 0 : _loader.contentLoaderInfo.bytesLoaded);
            if (_loader.contentLoaderInfo.bytesTotal != 0){
                _cachedBytesTotal = _loader.contentLoaderInfo.bytesTotal;
            };
            if ((((_cachedBytesTotal < _cachedBytesLoaded)) || (this._loaderCompleted))){
                _cachedBytesTotal = _cachedBytesLoaded;
            };
            if (this.vars.integrateProgress == false){
            } else {
                if (((!((this._queue == null))) && ((((uint(this.vars.estimatedBytes) < _cachedBytesLoaded)) || (this._queue.auditedSize))))){
                    if (this._queue.status <= LoaderStatus.COMPLETED){
                        _cachedBytesLoaded = (_cachedBytesLoaded + this._queue.bytesLoaded);
                        _cachedBytesTotal = (_cachedBytesTotal + this._queue.bytesTotal);
                    };
                } else {
                    if ((((uint(this.vars.estimatedBytes) > _cachedBytesLoaded)) && (((!(_initted)) || (((((!((this._queue == null))) && ((this._queue.status <= LoaderStatus.COMPLETED)))) && (!(this._queue.auditedSize)))))))){
                        _cachedBytesTotal = uint(this.vars.estimatedBytes);
                    };
                };
            };
            if (((((this._hasRSL) && ((_content == null)))) || (((!(_initted)) && ((_cachedBytesLoaded == _cachedBytesTotal)))))){
                _cachedBytesLoaded = int((_cachedBytesLoaded * 0.99));
            };
            _cacheIsDirty = false;
        }
        protected function _checkRequiredLoaders():void{
            if ((((((((this._queue == null)) && (!((this.vars.integrateProgress == false))))) && (!(_scriptAccessDenied)))) && (!((_content == null))))){
                this._queue = _rootLookup[_content];
                if (this._queue != null){
                    this._changeQueueListeners(true);
                    this._queue.load(false);
                    _cacheIsDirty = true;
                };
            };
        }
        public function getClass(_arg1:String):Class{
            var _local2:Object;
            var _local3:Array;
            var _local4:int;
            if ((((_content == null)) || (_scriptAccessDenied))){
                return (null);
            };
            if (_content.loaderInfo.applicationDomain.hasDefinition(_arg1)){
                return (_content.loaderInfo.applicationDomain.getDefinition(_arg1));
            };
            if (this._queue != null){
                _local3 = this._queue.getChildren(true, true);
                _local4 = _local3.length;
                while (--_local4 > -1) {
                    if ((_local3[_local4] is SWFLoader)){
                        _local2 = (_local3[_local4] as SWFLoader).getClass(_arg1);
                        if (_local2 != null){
                            return ((_local2 as Class));
                        };
                    };
                };
            };
            return (null);
        }
        public function getSWFChild(_arg1:String):DisplayObject{
            return (((((!(_scriptAccessDenied)) && ((_content is DisplayObjectContainer)))) ? DisplayObjectContainer(_content).getChildByName(_arg1) : null));
        }
        public function getLoader(_arg1:String){
            return (((this._queue)!=null) ? this._queue.getLoader(_arg1) : null);
        }
        public function getContent(_arg1:String){
            if ((((_arg1 == this.name)) || ((_arg1 == _url)))){
                return (this.content);
            };
            var _local2:LoaderCore = this.getLoader(_arg1);
            return (((_local2)!=null) ? _local2.content : null);
        }
        public function getChildren(_arg1:Boolean=false, _arg2:Boolean=false):Array{
            return (((this._queue)!=null) ? this._queue.getChildren(_arg1, _arg2) : []);
        }
        override protected function _initHandler(_arg1:Event):void{
            var _local2:Boolean;
            var _local3:DisplayObject;
            var _local4:String;
            var _local5:Object;
            if (_stealthMode){
                _initted = true;
                _local2 = this._loadOnExitStealth;
                this._dump(((_status)==LoaderStatus.DISPOSED) ? 3 : 1, _status, true);
                if (_local2){
                    this._load();
                };
                return;
            };
            this._hasRSL = false;
            try {
                _local3 = _loader.content;
                _local4 = getQualifiedClassName(_local3);
                if (_local4.substr(-13) == "__Preloader__"){
                    _local5 = _local3["__rslPreloader"];
                    if (_local5 != null){
                        _local4 = getQualifiedClassName(_local5);
                        if (_local4 == "fl.rsl::RSLPreloader"){
                            this._hasRSL = true;
                            this._rslAddedCount = 0;
                            _local3.addEventListener(Event.ADDED, this._rslAddedHandler);
                        };
                    };
                };
            } catch(error:Error) {
            };
            if (!this._hasRSL){
                this._init();
            };
        }
        protected function _init():void{
            var _local1:SoundTransform;
            this._determineScriptAccess();
            if (!_scriptAccessDenied){
                if (!this._hasRSL){
                    _content = _loader.content;
                };
                if (_content != null){
                    if ((((this.vars.autoPlay == false)) && ((_content is MovieClip)))){
                        _local1 = _content.soundTransform;
                        _local1.volume = 0;
                        _content.soundTransform = _local1;
                        _content.stop();
                    };
                    this._checkRequiredLoaders();
                };
                if (_loader.parent == _sprite){
                    if (((!((_sprite.stage == null))) && ((this.vars.suppressInitReparentEvents == true)))){
                        _sprite.addEventListener(Event.ADDED_TO_STAGE, this._captureFirstEvent, true, 1000, true);
                        _loader.addEventListener(Event.REMOVED_FROM_STAGE, this._captureFirstEvent, true, 1000, true);
                    };
                    _sprite.removeChild(_loader);
                };
            } else {
                _content = _loader;
                _loader.visible = true;
            };
            super._initHandler(null);
        }
        protected function _captureFirstEvent(_arg1:Event):void{
            _arg1.stopImmediatePropagation();
            _arg1.currentTarget.removeEventListener(_arg1.type, this._captureFirstEvent);
        }
        protected function _rslAddedHandler(_arg1:Event):void{
            if ((((((_arg1.target is DisplayObject)) && ((_arg1.currentTarget is DisplayObjectContainer)))) && ((_arg1.target.parent == _arg1.currentTarget)))){
                this._rslAddedCount++;
            };
            if (this._rslAddedCount > 1){
                _arg1.currentTarget.removeEventListener(Event.ADDED, this._rslAddedHandler);
                if (_status == LoaderStatus.LOADING){
                    _content = _arg1.target;
                    this._init();
                    this._calculateProgress();
                    dispatchEvent(new LoaderEvent(LoaderEvent.PROGRESS, this));
                    this._completeHandler(null);
                };
            };
        }
        override protected function _passThroughEvent(_arg1:Event):void{
            if (((!((((_arg1.type == "uncaughtError")) && (this._suppressUncaughtError(_arg1))))) && (!((_arg1.target == this._queue))))){
                super._passThroughEvent(_arg1);
            };
        }
        override protected function _progressHandler(_arg1:Event):void{
            var _local2:uint;
            var _local3:uint;
            if (_status == LoaderStatus.LOADING){
                if ((((this._queue == null)) && (_initted))){
                    this._checkRequiredLoaders();
                };
                if (_dispatchProgress){
                    _local2 = _cachedBytesLoaded;
                    _local3 = _cachedBytesTotal;
                    this._calculateProgress();
                    if (((!((_cachedBytesLoaded == _cachedBytesTotal))) && (((!((_local2 == _cachedBytesLoaded))) || (!((_local3 == _cachedBytesTotal))))))){
                        dispatchEvent(new LoaderEvent(LoaderEvent.PROGRESS, this));
                    };
                } else {
                    _cacheIsDirty = true;
                };
            };
        }
        override protected function _completeHandler(_arg1:Event=null):void{
            var _local2:SoundTransform;
            this._loaderCompleted = true;
            this._checkRequiredLoaders();
            this._calculateProgress();
            if (this.progress == 1){
                if (((((!(_scriptAccessDenied)) && ((this.vars.autoPlay == false)))) && ((_content is MovieClip)))){
                    _local2 = _content.soundTransform;
                    _local2.volume = 1;
                    _content.soundTransform = _local2;
                };
                this._changeQueueListeners(false);
                super._determineScriptAccess();
                super._completeHandler(_arg1);
            };
        }
        override protected function _errorHandler(_arg1:Event):void{
            if (!this._suppressUncaughtError(_arg1)){
                super._errorHandler(_arg1);
            };
        }
        protected function _suppressUncaughtError(_arg1:Event):Boolean{
            if ((((_arg1 is LoaderEvent)) && ((LoaderEvent(_arg1).data is Event)))){
                _arg1 = (LoaderEvent(_arg1).data as Event);
            };
            if (_arg1.type == "uncaughtError"){
                if (this._lastPTUncaughtError == (this._lastPTUncaughtError = _arg1)){
                    return (true);
                };
                if (this.vars.suppressUncaughtErrors == true){
                    _arg1.preventDefault();
                    _arg1.stopImmediatePropagation();
                    return (true);
                };
            };
            return (false);
        }
        override protected function _failHandler(_arg1:Event, _arg2:Boolean=true):void{
            if ((((((_arg1.type == "ioError")) || ((_arg1.type == "securityError")))) && ((_arg1.target == _loader.contentLoaderInfo)))){
                this._loaderFailed = true;
                if (this._loadOnExitStealth){
                    this._dump(1, _status, true);
                    this._load();
                    return;
                };
            };
            if (_arg1.target == this._queue){
                _status = LoaderStatus.FAILED;
                _time = (getTimer() - _time);
                dispatchEvent(new LoaderEvent(LoaderEvent.CANCEL, this));
                dispatchEvent(new LoaderEvent(LoaderEvent.FAIL, this, ((this.toString() + " > ") + (_arg1 as Object).text)));
                return;
            };
            super._failHandler(_arg1, _arg2);
        }
        override public function set url(_arg1:String):void{
            if (_url != _arg1){
                if ((((((_status == LoaderStatus.LOADING)) && (!(_initted)))) && (!(this._loaderFailed)))){
                    this._loadOnExitStealth = true;
                };
                super.url = _arg1;
            };
        }

    }
}//package com.greensock.loading 
﻿package com.greensock.loading {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import com.greensock.loading.core.*;
    import flash.net.*;
    import com.greensock.events.*;
    import flash.system.*;

    public class LoaderMax extends LoaderCore {

        public static const version:Number = 1.921;

        public static var defaultEstimatedBytes:uint = 20000;
        public static var defaultAuditSize:Boolean = true;
        public static var defaultContext:LoaderContext;
        public static var contentDisplayClass:Class;

        protected var _loaders:Array;
        protected var _activeLoaders:Dictionary;
        public var skipFailed:Boolean;
        public var skipPaused:Boolean;
        public var maxConnections:uint;
        public var autoLoad:Boolean;

        public function LoaderMax(_arg1:Object=null){
            var _local2:int;
            super(_arg1);
            _type = "LoaderMax";
            this._loaders = [];
            this._activeLoaders = new Dictionary();
            this.skipFailed = Boolean(!((this.vars.skipFailed == false)));
            this.skipPaused = Boolean(!((this.vars.skipPaused == false)));
            this.autoLoad = Boolean((this.vars.autoLoad == true));
            this.maxConnections = ((("maxConnections" in this.vars)) ? uint(this.vars.maxConnections) : 2);
            if ((this.vars.loaders is Array)){
                _local2 = 0;
                while (_local2 < this.vars.loaders.length) {
                    this.insert(this.vars.loaders[_local2], _local2);
                    _local2++;
                };
            };
        }
        public static function parse(_arg1, _arg2:Object=null, _arg3:Object=null){
            var _local4:LoaderMax;
            var _local5:int;
            var _local6:int;
            var _local7:String;
            if ((_arg1 is Array)){
                _local4 = new LoaderMax(_arg2);
                _local5 = _arg1.length;
                _local6 = 0;
                while (_local6 < _local5) {
                    _local4.append(LoaderMax.parse(_arg1[_local6], _arg3));
                    _local6++;
                };
                return (_local4);
            };
            if ((((_arg1 is String)) || ((_arg1 is URLRequest)))){
                _local7 = (((_arg1 is String)) ? _arg1 : URLRequest(_arg1).url);
                var _temp1 = _local7.toLowerCase().split("?")[0];
                _local7 = _local7.toLowerCase().split("?")[0];
                _local7 = _temp1.substr((_local7.lastIndexOf(".") + 1));
                if ((_local7 in _extensions)){
                    return (new _extensions[_local7](_arg1, _arg2));
                };
            } else {
                if ((_arg1 is LoaderCore)){
                    return ((_arg1 as LoaderCore));
                };
            };
            throw (new Error((("LoaderMax could not parse " + _arg1) + ". Don't forget to use LoaderMax.activate() to activate the necessary types of loaders.")));
        }
        public static function activate(_arg1:Array):void{
        }
        public static function registerFileType(_arg1:String, _arg2:Class):void{
            _activateClass("", _arg2, _arg1);
        }
        public static function getLoader(_arg1:String){
            return (((_globalRootLoader)!=null) ? _globalRootLoader.getLoader(_arg1) : null);
        }
        public static function getContent(_arg1:String){
            return (((_globalRootLoader)!=null) ? _globalRootLoader.getContent(_arg1) : null);
        }
        public static function prioritize(_arg1:String, _arg2:Boolean=true):LoaderCore{
            var _local3:LoaderCore = getLoader(_arg1);
            if (_local3 != null){
                _local3.prioritize(_arg2);
            };
            return (_local3);
        }

        override protected function _load():void{
            this._loadNext(null);
        }
        public function append(_arg1:LoaderCore):LoaderCore{
            return (this.insert(_arg1, this._loaders.length));
        }
        public function prepend(_arg1:LoaderCore):LoaderCore{
            return (this.insert(_arg1, 0));
        }
        public function insert(_arg1:LoaderCore, _arg2:uint=999999999):LoaderCore{
            var _local3:String;
            if ((((((_arg1 == null)) || ((_arg1 == this)))) || ((_status == LoaderStatus.DISPOSED)))){
                return (null);
            };
            if (this != _arg1.rootLoader){
                this._removeLoader(_arg1, false);
            };
            if (_arg1.rootLoader == _globalRootLoader){
                _arg1.rootLoader.remove(_arg1);
            };
            if (_arg2 > this._loaders.length){
                _arg2 = this._loaders.length;
            };
            this._loaders.splice(_arg2, 0, _arg1);
            if (this != _globalRootLoader){
                for (_local3 in _listenerTypes) {
                    if (((!((_local3 == "onProgress"))) && (!((_local3 == "onInit"))))){
                        _arg1.addEventListener(_listenerTypes[_local3], _passThroughEvent, false, -100, true);
                    };
                };
                _arg1.addEventListener(LoaderEvent.PROGRESS, this._progressHandler, false, -100, true);
                _arg1.addEventListener("prioritize", this._prioritizeHandler, false, -100, true);
            };
            _arg1.addEventListener("dispose", this._disposeHandler, false, -100, true);
            _cacheIsDirty = true;
            if (_status == LoaderStatus.LOADING){
            } else {
                if (_status != LoaderStatus.PAUSED){
                    _status = LoaderStatus.READY;
                } else {
                    if (_prePauseStatus == LoaderStatus.COMPLETED){
                        _prePauseStatus = LoaderStatus.READY;
                    };
                };
            };
            if (((this.autoLoad) && ((_arg1.status == LoaderStatus.READY)))){
                if (_status != LoaderStatus.LOADING){
                    this.load(false);
                } else {
                    this._loadNext(null);
                };
            };
            return (_arg1);
        }
        public function remove(_arg1:LoaderCore):void{
            this._removeLoader(_arg1, true);
        }
        protected function _removeLoader(_arg1:LoaderCore, _arg2:Boolean):void{
            if (_arg1 == null){
                return;
            };
            if (((_arg2) && (!((this == _arg1.rootLoader))))){
                _arg1.rootLoader.append(_arg1);
            };
            this._removeLoaderListeners(_arg1, true);
            this._loaders.splice(this.getChildIndex(_arg1), 1);
            if ((_arg1 in this._activeLoaders)){
                delete this._activeLoaders[_arg1];
                _arg1.cancel();
                if (_status == LoaderStatus.LOADING){
                    this._loadNext(null);
                };
            };
            _cacheIsDirty = true;
            this._progressHandler(null);
        }
        public function empty(_arg1:Boolean=true, _arg2:Boolean=false):void{
            var _local3:int = this._loaders.length;
            while (--_local3 > -1) {
                if (_arg1){
                    LoaderCore(this._loaders[_local3]).dispose(_arg2);
                } else {
                    if (_arg2){
                        LoaderCore(this._loaders[_local3]).unload();
                    } else {
                        this._removeLoader(this._loaders[_local3], true);
                    };
                };
            };
        }
        override protected function _dump(_arg1:int=0, _arg2:int=0, _arg3:Boolean=false):void{
            var _local4:int;
            if (_arg2 == LoaderStatus.DISPOSED){
                _status = LoaderStatus.DISPOSED;
                this.empty(true, Boolean((_arg1 == 3)));
                if ((this.vars.requireWithRoot is DisplayObject)){
                    delete _rootLookup[this.vars.requireWithRoot];
                };
                this._activeLoaders = null;
            };
            if (_arg1 <= 1){
                this._cancelActiveLoaders();
            };
            if (_arg1 == 1){
                _local4 = this._loaders.length;
                while (--_local4 > -1) {
                    LoaderCore(this._loaders[_local4]).unload();
                };
            };
            super._dump(_arg1, _arg2, _arg3);
            _cacheIsDirty = true;
        }
        override protected function _calculateProgress():void{
            var _local2:LoaderCore;
            var _local3:int;
            _cachedBytesLoaded = 0;
            _cachedBytesTotal = 0;
            var _local1:int = this._loaders.length;
            while (--_local1 > -1) {
                _local2 = this._loaders[_local1];
                _local3 = _local2.status;
                if ((((((_local3 <= LoaderStatus.COMPLETED)) || (((!(this.skipPaused)) && ((_local3 == LoaderStatus.PAUSED)))))) || (((!(this.skipFailed)) && ((_local3 == LoaderStatus.FAILED)))))){
                    _cachedBytesLoaded = (_cachedBytesLoaded + _local2.bytesLoaded);
                    _cachedBytesTotal = (_cachedBytesTotal + _local2.bytesTotal);
                };
            };
            _cacheIsDirty = false;
        }
        protected function _cancelActiveLoaders():void{
            var _local2:LoaderCore;
            var _local1:int = this._loaders.length;
            while (--_local1 > -1) {
                _local2 = this._loaders[_local1];
                if (_local2.status == LoaderStatus.LOADING){
                    delete this._activeLoaders[_local2];
                    this._removeLoaderListeners(_local2, false);
                    _local2.cancel();
                };
            };
        }
        protected function _removeLoaderListeners(_arg1:LoaderCore, _arg2:Boolean):void{
            var _local3:String;
            _arg1.removeEventListener(LoaderEvent.COMPLETE, this._loadNext);
            _arg1.removeEventListener(LoaderEvent.CANCEL, this._loadNext);
            if (_arg2){
                _arg1.removeEventListener(LoaderEvent.PROGRESS, this._progressHandler);
                _arg1.removeEventListener("prioritize", this._prioritizeHandler);
                _arg1.removeEventListener("dispose", this._disposeHandler);
                for (_local3 in _listenerTypes) {
                    if (((!((_local3 == "onProgress"))) && (!((_local3 == "onInit"))))){
                        _arg1.removeEventListener(_listenerTypes[_local3], _passThroughEvent);
                    };
                };
            };
        }
        public function getChildrenByStatus(_arg1:int, _arg2:Boolean=false):Array{
            var _local3:Array = [];
            var _local4:Array = this.getChildren(_arg2, false);
            var _local5:int = _local4.length;
            var _local6:int;
            while (_local6 < _local5) {
                if (LoaderCore(_local4[_local6]).status == _arg1){
                    _local3.push(_local4[_local6]);
                };
                _local6++;
            };
            return (_local3);
        }
        public function getChildAt(_arg1:int){
            return (this._loaders[_arg1]);
        }
        public function getChildren(_arg1:Boolean=false, _arg2:Boolean=false):Array{
            var _local3:Array = [];
            var _local4:int = this._loaders.length;
            var _local5:int;
            while (_local5 < _local4) {
                if (((!(_arg2)) || (!((this._loaders[_local5] is LoaderMax))))){
                    _local3.push(this._loaders[_local5]);
                };
                if (((_arg1) && (this._loaders[_local5].hasOwnProperty("getChildren")))){
                    _local3 = _local3.concat(this._loaders[_local5].getChildren(true, _arg2));
                };
                _local5++;
            };
            return (_local3);
        }
        public function prependURLs(_arg1:String, _arg2:Boolean=false):void{
            var _local3:Array = this.getChildren(_arg2, true);
            var _local4:int = _local3.length;
            while (--_local4 > -1) {
                LoaderItem(_local3[_local4]).url = (_arg1 + LoaderItem(_local3[_local4]).url);
            };
        }
        public function replaceURLText(_arg1:String, _arg2:String, _arg3:Boolean=false):void{
            var _local5:LoaderItem;
            var _local4:Array = this.getChildren(_arg3, true);
            var _local6:int = _local4.length;
            while (--_local6 > -1) {
                _local5 = _local4[_local6];
                _local4[_local6].url = _local5.url.split(_arg1).join(_arg2);
                if (("alternateURL" in _local5.vars)){
                    _local5.vars.alternateURL = _local5.vars.alternateURL.split(_arg1).join(_arg2);
                };
            };
        }
        public function getLoader(_arg1:String){
            var _local3:LoaderCore;
            var _local2:int = this._loaders.length;
            while (--_local2 > -1) {
                _local3 = this._loaders[_local2];
                if ((((_local3.name == _arg1)) || ((((_local3 is LoaderItem)) && (((_local3 as LoaderItem).url == _arg1)))))){
                    return (_local3);
                };
                if (_local3.hasOwnProperty("getLoader")){
                    _local3 = ((_local3 as Object).getLoader(_arg1) as LoaderCore);
                    if (_local3 != null){
                        return (_local3);
                    };
                };
            };
            return (null);
        }
        public function getContent(_arg1:String){
            var _local2:LoaderCore = this.getLoader(_arg1);
            return (((_local2)!=null) ? _local2.content : null);
        }
        public function getChildIndex(_arg1:LoaderCore):uint{
            var _local2:int = this._loaders.length;
            while (--_local2 > -1) {
                if (this._loaders[_local2] == _arg1){
                    return (_local2);
                };
            };
            return (999999999);
        }
        override public function auditSize():void{
            if (!this.auditedSize){
                this._auditSize(null);
            };
        }
        protected function _auditSize(_arg1:Event=null):void{
            var _local4:LoaderCore;
            var _local5:Boolean;
            if (_arg1 != null){
                _arg1.target.removeEventListener("auditedSize", this._auditSize);
                _arg1.target.removeEventListener(LoaderEvent.FAIL, this._auditSize);
            };
            var _local2:uint = this._loaders.length;
            var _local3:int = ((this.skipPaused) ? LoaderStatus.COMPLETED : LoaderStatus.PAUSED);
            var _local6:int;
            while (_local6 < _local2) {
                _local4 = this._loaders[_local6];
                if (((!(_local4.auditedSize)) && ((_local4.status <= _local3)))){
                    if (!_local5){
                        _local4.addEventListener("auditedSize", this._auditSize, false, -100, true);
                        _local4.addEventListener(LoaderEvent.FAIL, this._auditSize, false, -100, true);
                    };
                    _local5 = true;
                    _local4.auditSize();
                };
                _local6++;
            };
            if (!_local5){
                if (_status == LoaderStatus.LOADING){
                    this._loadNext(null);
                };
                dispatchEvent(new Event("auditedSize"));
            };
        }
        protected function _loadNext(_arg1:Event=null):void{
            var _local2:Boolean;
            var _local3:LoaderCore;
            var _local4:Array;
            var _local5:int;
            var _local6:uint;
            var _local7:int;
            if (((!((_arg1 == null))) && (!((this._activeLoaders == null))))){
                delete this._activeLoaders[_arg1.target];
                this._removeLoaderListeners(LoaderCore(_arg1.target), false);
            };
            if (_status == LoaderStatus.LOADING){
                _local2 = ((("auditSize" in this.vars)) ? Boolean(this.vars.auditSize) : LoaderMax.defaultAuditSize);
                if (((_local2) && (!(this.auditedSize)))){
                    this._auditSize(null);
                    return;
                };
                _local4 = this._loaders.concat();
                _local5 = _local4.length;
                _local6 = 0;
                this._calculateProgress();
                _local7 = 0;
                while (_local7 < _local5) {
                    _local3 = _local4[_local7];
                    if (((!(this.skipPaused)) && ((_local3.status == LoaderStatus.PAUSED)))){
                        super._failHandler(new LoaderEvent(LoaderEvent.FAIL, this, (("Did not complete LoaderMax because skipPaused was false and " + _local3.toString()) + " was paused.")), false);
                        return;
                    };
                    if (((!(this.skipFailed)) && ((_local3.status == LoaderStatus.FAILED)))){
                        super._failHandler(new LoaderEvent(LoaderEvent.FAIL, this, (("Did not complete LoaderMax because skipFailed was false and " + _local3.toString()) + " failed.")), false);
                        return;
                    };
                    if (_local3.status <= LoaderStatus.LOADING){
                        _local6++;
                        if (!(_local3 in this._activeLoaders)){
                            this._activeLoaders[_local3] = true;
                            _local3.addEventListener(LoaderEvent.COMPLETE, this._loadNext, false, -100, true);
                            _local3.addEventListener(LoaderEvent.CANCEL, this._loadNext, false, -100, true);
                            _local3.load(false);
                        };
                        if (_local6 == this.maxConnections){
                            break;
                        };
                    };
                    _local7++;
                };
                if ((((_local6 == 0)) && ((_cachedBytesLoaded == _cachedBytesTotal)))){
                    _completeHandler(null);
                };
            };
        }
        override protected function _progressHandler(_arg1:Event):void{
            var _local2:uint;
            var _local3:uint;
            if (((_dispatchChildProgress) && (!((_arg1 == null))))){
                dispatchEvent(new LoaderEvent(LoaderEvent.CHILD_PROGRESS, _arg1.target));
            };
            if (((_dispatchProgress) && (!((_status == LoaderStatus.DISPOSED))))){
                _local2 = _cachedBytesLoaded;
                _local3 = _cachedBytesTotal;
                this._calculateProgress();
                if ((((_local2 == 0)) && ((_cachedBytesLoaded == 0)))){
                } else {
                    if (((((!((_cachedBytesLoaded == _cachedBytesTotal))) || (!((_status == LoaderStatus.LOADING))))) && (((!((_local2 == _cachedBytesLoaded))) || (!((_local3 == _cachedBytesTotal))))))){
                        dispatchEvent(new LoaderEvent(LoaderEvent.PROGRESS, this));
                    };
                };
            } else {
                _cacheIsDirty = true;
            };
        }
        protected function _disposeHandler(_arg1:Event):void{
            this._removeLoader(LoaderCore(_arg1.target), false);
        }
        protected function _prioritizeHandler(_arg1:Event):void{
            var _local3:uint;
            var _local2:LoaderCore = (_arg1.target as LoaderCore);
            this._loaders.splice(this.getChildIndex(_local2), 1);
            this._loaders.unshift(_local2);
            if ((((((_status == LoaderStatus.LOADING)) && ((_local2.status <= LoaderStatus.LOADING)))) && (!((_local2 in this._activeLoaders))))){
                this._cancelActiveLoaders();
                _local3 = this.maxConnections;
                this.maxConnections = 1;
                this._loadNext(null);
                this.maxConnections = _local3;
            };
        }
        public function get numChildren():uint{
            return (this._loaders.length);
        }
        override public function get content(){
            var _local1:Array = [];
            var _local2:int = this._loaders.length;
            while (--_local2 > -1) {
                _local1[_local2] = LoaderCore(this._loaders[_local2]).content;
            };
            return (_local1);
        }
        override public function get status():int{
            var _local1:Array;
            var _local2:int;
            if (_status == LoaderStatus.COMPLETED){
                _local1 = [0, 0, 0, 0, 0, 0];
                _local2 = this._loaders.length;
                while (--_local2 > -1) {
                    var _local3 = _local1;
                    var _local4 = LoaderCore(this._loaders[_local2]).status;
                    var _local5 = (_local3[_local4] + 1);
                    _local3[_local4] = _local5;
                };
                if (((((!(this.skipFailed)) && (!((_local1[4] == 0))))) || (((!(this.skipPaused)) && (!((_local1[3] == 0))))))){
                    _status = LoaderStatus.FAILED;
                } else {
                    if ((_local1[0] + _local1[1]) != 0){
                        _status = LoaderStatus.READY;
                        _cacheIsDirty = true;
                    };
                };
            };
            return (_status);
        }
        override public function get auditedSize():Boolean{
            var _local1:int = ((this.skipPaused) ? LoaderStatus.COMPLETED : LoaderStatus.PAUSED);
            var _local2:int = this._loaders.length;
            while (--_local2 > -1) {
                if (((!(LoaderCore(this._loaders[_local2]).auditedSize)) && ((LoaderCore(this._loaders[_local2]).status <= _local1)))){
                    return (false);
                };
            };
            return (true);
        }
        public function get rawProgress():Number{
            var _local3:int;
            var _local1:Number = 0;
            var _local2:uint;
            var _local4:int = this._loaders.length;
            while (--_local4 > -1) {
                _local3 = LoaderCore(this._loaders[_local4]).status;
                if (((((!((_local3 == LoaderStatus.DISPOSED))) && (!((((_local3 == LoaderStatus.PAUSED)) && (this.skipPaused)))))) && (!((((_local3 == LoaderStatus.FAILED)) && (this.skipFailed)))))){
                    _local2++;
                    _local1 = (_local1 + (((this._loaders[_local4] is LoaderMax)) ? LoaderMax(this._loaders[_local4]).rawProgress : LoaderCore(this._loaders[_local4]).progress));
                };
            };
            return (((_local2)==0) ? 0 : (_local1 / _local2));
        }

    }
}//package com.greensock.loading 
﻿package com.greensock.events {
    import flash.events.*;

    public class LoaderEvent extends Event {

        public static const CHILD_OPEN:String = "childOpen";
        public static const CHILD_PROGRESS:String = "childProgress";
        public static const CHILD_CANCEL:String = "childCancel";
        public static const CHILD_COMPLETE:String = "childComplete";
        public static const CHILD_FAIL:String = "childFail";
        public static const OPEN:String = "open";
        public static const PROGRESS:String = "progress";
        public static const CANCEL:String = "cancel";
        public static const FAIL:String = "fail";
        public static const INIT:String = "init";
        public static const COMPLETE:String = "complete";
        public static const HTTP_STATUS:String = "httpStatus";
        public static const SCRIPT_ACCESS_DENIED:String = "scriptAccessDenied";
        public static const ERROR:String = "error";
        public static const IO_ERROR:String = "ioError";
        public static const SECURITY_ERROR:String = "securityError";
        public static const UNCAUGHT_ERROR:String = "uncaughtError";
        public static const UNLOAD:String = "unload";

        protected var _target:Object;
        protected var _ready:Boolean;
        public var text:String;
        public var data;

        public function LoaderEvent(_arg1:String, _arg2:Object, _arg3:String="", _arg4=null){
            super(_arg1, false, false);
            this._target = _arg2;
            this.text = _arg3;
            this.data = _arg4;
        }
        override public function clone():Event{
            return (new LoaderEvent(this.type, this._target, this.text, this.data));
        }
        override public function get target():Object{
            if (this._ready){
                return (this._target);
            };
            this._ready = true;
            return (null);
        }

    }
}//package com.greensock.events 
﻿package {
    import flash.display.*;
    import flash.geom.*;
    import flash.events.*;

    public class SRLoader extends MovieClip {

        public var logo:MovieClip;
        public var loaderSlider:MovieClip;
        public var loadingStreams:MovieClip;
        var isSmall:Boolean = false;

        public function SRLoader(_arg1:Boolean){
            this.addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
            if (_arg1 == false){
                this.loadingStreams.visible = false;
                this.isSmall = true;
            };
        }
        function onAddedToStage(_arg1:Event):void{
        }
        function showLoader(_arg1:Number=1):void{
            addChild(this.loaderSlider);
            if (this.isSmall){
                this.x = 310;
                this.y = 179;
            };
            this.scaleX = (this.scaleY = _arg1);
            this.scrollRect = new Rectangle((-((this.width / 2)) - 5), (-((this.height / 2)) - 5), (this.width + 5), (this.height + 5));
            this.visible = true;
        }
        function hideLoader():void{
            try {
                this.showProgress(0);
                this.removeChild(this.loaderSlider);
            } catch(e:Error) {
                trace(("SR: error " + e.message));
            };
        }
        function showProgress(_arg1:Number){
            this.loaderSlider.sliderFill.x = (-(this.width) + (_arg1 * this.width));
        }

    }
}//package